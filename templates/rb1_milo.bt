BigEndian();

#include "milo_common.bt"
#include "rb1_common.bt"

MiloFile milo;
//ObjectDir dir;

//ExtraData data;

// 4 - Unknown (No data) or 12?

// 10 - Unknown (No data)

// 19 - Views
//  7
//  2 matrices

// ui/loading_images_ps2.milo_ps2: No 4, 10


/*
local uint i;
local uint fileSize;
local uint startOffset = FTell();

// Skips junk data
fileSize = findNextFile(adde);
byte junkData[fileSize + 4];
startOffset = FTell();

for (i = 0; i < milo.entryCount; i++)
{
    fileSize = findNextFile(adde);
    if (fileSize == -1) break;
    
    //byte file[fileSize];
    milo.entries[i].offset = FTell();
    milo.entries[i].size = fileSize;
    FSkip(fileSize + 4);
}

i = 0;
FSeek(startOffset);

typedef struct
{
    FSeek(milo.entries[i].offset);
    local string type = milo.entries[i].type.text;
    local string name = milo.entries[i].name.text;
    byte data[milo.entries[i].size];
    uint padding<format=hex>;
    i++;
} Blob<read=getFileName>;

string getFileName(Blob& blob)
{
    return blob.type + " | " + blob.name;
}

Blob files[milo.entryCount]<optimize=false>;
//Blob first;*/