LittleEndian();

typedef struct
{
    // 40 bytes
    char magic[4];
    uint version; // Always 2
    uint fileEntryOffset; // Always 256
    uint fileEntryCount;
    uint folderEntryOffset;
    uint folderEntryCount;
    uint stringTableOffset;
    uint stringCount;
    uint totalHdrSize; // Size of header + string offsets + string table
    uint blockSize; // Used for padding
} Header;

typedef struct
{
    // 24 bytes
    uint unknown; // Path name hash?
    uint fileNameOffset;
    ushort folderNameOffset;
    ushort blockOffset;
    uint block; // Use block * blockSize + blockOffset to get file position
    uint fileSize;
    uint inflatedSize; // Same as file size if not compressed
} FileEntry;

typedef struct
{
    // 8 bytes
    uint unknown; // Name hash?
    uint folderNameIndex;
} FolderEntry;

Header header;

FSeek(header.fileEntryOffset);
FileEntry fileEntries[header.fileEntryCount];

FSeek(header.folderEntryOffset);
FolderEntry folderEntries[header.folderEntryCount];

FSeek(header.stringTableOffset);
char stringTable[header.totalHdrSize - FTell()];