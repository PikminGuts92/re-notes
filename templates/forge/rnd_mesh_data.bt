#ifndef FORGE_RND_MESH_DATA
#define FORGE_RND_MESH_DATA

typedef struct
{
    local uint start_offset = FTell();
    uint magic; // 20 (FME), 21 (DCS)
    // TODO: FME
    
    byte empty_data[6];
    uint always_4;
    
    float some_floats[7];
    uint always_0;
    
    //FSeek(start_offset + 46);
    //local uint face_count = ReadUInt(start_offset + 46);
    uint face_count;
    
    uint always_21845; // 0x00005555
    struct Face
    {
        uint f1;
        uint f2;
        uint f3;
    } faces[face_count]<read=Str("[%d, %d, %d]", this.f1, this.f2, this.f3)>;

    //FSeek(start_offset + 582);
    //local uint vert_count = ReadUInt(start_offset + 582);
    uint vert_count;
    uint always_2114;
    
    Bool use_vert_size;

    local uint vert_size = 114; // Default in DCS at least
    if (use_vert_size)
    {
        uint defined_vert_size; // 40 (FME?), 60 (DCS?)
        uint some_number; // 2, 4
        
        vert_size = defined_vert_size;
    }
    
    switch (vert_size)
    {
        case 60:
            struct Vertex60
            {
                // 12 bytes
                float x;
                float y;
                float z;

                // 4 bytes
                short un1; // 4, 8, 191
                short un2; // -1

                // UVs?
                // 8 bytes
                hfloat u;
                hfloat v;
                hfloat n1; // Doesn't seem to be floats
                hfloat n2;
                
                // Packed normals?
                // 16 bytes
                uint unk; // 0
                float f1;
                float f2;
                float f3;
                float f4;
                
                // 4 bytes
                short u1; // 1023, -14132
                short u2; // 0, 12

                // Bones?
                // 4 bytes
                ubyte b1; // 4, 5
                ubyte b2;
                ubyte b3;
                ubyte b4;
                
                // 4 bytes
                short uu1;
                short uu2;
                
                // Bones 2?
                // 4 bytes
                ubyte bb1; // 0, 1
                ubyte bb2;
                ubyte bb3;
                ubyte bb4;
            } verts[vert_count]<read=Str("(%f, %f, %f)", this.x, this.y, this.z)>;
            break;
        case 114:
            struct Vertex114
            {
                float x;
                float y;
                float z;

                float unknown_1[25];
                ushort unknown_2;
            } verts[vert_count]<read=Str("(%f, %f, %f)", this.x, this.y, this.z)>;
            break;
        default:
            Printf("WARNING: Unknown vert size of %d, at offset %d\n", vert_size, FTell() - 4);
            break;
    }
    
    uint always_0;
    uint always_65k;
} RndMeshData;

#endif