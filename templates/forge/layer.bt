#ifndef FORGE_LAYER
#define FORGE_LAYER

#include "common.bt"
#include "object.bt"
#include "trans.bt"

struct Layer;
struct LayerEntries;
struct LayerFiles;

typedef struct (string name, Bool inlined)
{
    local string name = name;
    
    char magic[4]; // "LAYR"
    int always_61;
    
    Bool bool_1; // Always true if .layer file? No...
    Bool bool_2; // True for layers with embedded references?

    // String table info for names/classes
    // Both 0 if no entries
    uint string_table_string_count;
    uint string_table_used_size;
    
    uint entry_count;
    
    if (entry_count > 0)
    {
        struct LayerEntryName
        {
            FString file_class;
            FString file_name;
        } layer_entry_names[entry_count]<read=Str("%s (%s)", this.file_name.text, this.file_class.text), optimize=false>;
    }

    if (inlined) return;
    
    if (entry_count > 0) LayerEntries entries(this);
    LayerFiles files(this);
} Layer<read=this.name>;

typedef struct (string class, string name)
{
    local string class = class;
    local string name = name;
    
    // Read as regular entry
    uint64 size;
    local uint64 end_offset = FTell() + size;
    
    if (end_offset > FileSize())
    {
        Printf("WARNING: End of file reached for entry %s (%s)\n", name, class);
        return;
    }
           
    switch (class)
    {
        case "Object":
            Object data;
            break;
        case "Trans":
            Trans data(False);
            break;
        default:
            byte data[size];
            break;
        }

    // Help with in-progress templates
    if (FTell() < end_offset)
    {
        byte data_unknown[end_offset - FTell()];
    }
} LayerEntry<read=Str("%s (%s)", this.name, this.class)>;

typedef struct (Layer& layer)
{
    local string layer_name = layer.name;
    local uint entry_count = layer.entry_count;
    
    local uint i;
    for (i = 0; i < entry_count; i++)
    {
        LayerEntry entries(layer.layer_entry_names[i].file_class.text, layer.layer_entry_names[i].file_name.text);
    }
} LayerEntries<read=Str("%s (%d entries)", this.layer_name, this.entry_count)>;

typedef struct
{
    FString file_class;
    FString file_name;
        
    uint64 size;
    byte data[size];
} EmbeddedFile<read=Str("%s (%s)", this.file_name.text, this.file_class.text)>;

typedef struct (Layer& layer)
{
    local string layer_name = layer.name;
    local uint file_count = 0;
    
    while (ReadUInt(FTell()) != 0)
    {
        EmbeddedFile embedded_files;
        file_count++;
    }
    
    byte terminated_data[12];
} LayerFiles<read=Str("%s (%d files)", this.layer_name, this.file_count)>;

#endif

//LittleEndian();
//Layer file;