#ifndef FORGE_BITMAP
#define FORGE_BITMAP

LittleEndian();

typedef enum <uint>
{
    RGBA = 3,
    DXT1_BC1 = 8,
    DXT5_BC3 = 24,
    ATI2_BC5 = 32,
    TPL_CMP = 72,
    TPL_CMP_ALPHA = 328
} BITMAP_ENCODING;

typedef struct (ubyte mip, ushort w, ushort h, uint size)
{
    local ubyte mip_level = mip;
    local ushort width = w;
    local ushort height = h;

    byte data[size];
} Texture<read=read_texture>;

string read_texture(Texture& tex)
{
    local string s;
    SPrintf(s, "mip #%d: %dx%d", tex.mip_level, tex.width, tex.height);
    return s;
}

typedef struct
{
    int version; // 6 (RB4)
    int sub_version; // 9 (RB4)
    
    ubyte zeros_1[8];
    
    uint some_enum; // 0, 16
    
    ubyte zeros_2[16];
    
    uint always_4; // bpp?
    uint always_0;
    uint always_32;
    
    ubyte zeros_3[48];

    uint always_6;
    uint always_16;
    uint always_0;
    uint always_1;
    uint always_1;
    uint always_0;
    
    int neg_1;
    int neg_1;
    
    uint always_4;
    uint always_2;
    uint always_1;
    uint always_2;
    uint always_2;
    uint always_0;
    uint always_2;
    
    uint always_3;
    ubyte zeros_4[20];
    
    uint mip_count;
    struct MipInfo
    {
        uint width;
        uint height;
        uint always_1;
    } mip_infos[mip_count];
    
    uint always_6;
    
    local uint i = 0;
    struct MipTexture
    {
        local uint width = mip_infos[i].width;
        local uint height = mip_infos[i].height;
        
        uint size;
        byte data[size];
        
        i++;
    } textures[mip_count]<read=Str("%dx%d (%d bytes)", this.width, this.height, this.size), optimize=false>;
    
    uint always_0;
    uint always_8;
    
    float some_floats[4];
    uint always_8;

    return;
    
    ubyte bpp;
    BITMAP_ENCODING encoding;
    ubyte mip_maps;

    ushort width;
    ushort height;
    ushort bpl;

    // Skip empty bytes
    FSkip(19);

    if (encoding == 3 && (bpp == 4 || bpp == 8))
    {
        byte color_palette[1 << (bpp + 2)];
    }

    local ubyte i = 0;
    local ushort w = width;
    local ushort h = height;

    local uint data_size;
    while (i <= mip_maps)
    {
        data_size = ((uint)w * (uint)h * (uint)bpp) / 8;
        Texture textures(i, w, h, data_size);

        w >>= 1;
        h >>= 1;
        i++;
    }
} ForgeBitmap;

ForgeBitmap file;

#endif