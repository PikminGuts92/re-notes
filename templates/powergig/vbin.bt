/*
.model
.anim
.vres
*/

LittleEndian();

struct Element;
struct Elements;

typedef struct
{
    char raw[4];
    local string value = Str("%c%c%c%c", this.raw[3], this.raw[2], this.raw[1], this.raw[0]);
} Magic<read=this.value, optimize=false>;

typedef struct
{
    float x;
    float y;
    float z;
} Vector3<read=Str("(%f, %f, %f)", this.x, this.y, this.z)>;

typedef struct
{
    float x;
    float y;
    float z;
    float w;
} Vector4<read=Str("(%f, %f, %f, %f)", this.x, this.y, this.z, this.w)>;

typedef struct
{
    float value[7];
} Transform<read=Str("[%f, %f, %f, %f, %f, %f, %f]", this.value[0], this.value[1], this.value[2], this.value[3], this.value[4], this.value[5], this.value[6])>;

typedef struct
{
    local string string_value = "";
    
    uint size;
    if (size > 0)
    {
        char value[size];
        string_value = value;
    }
} PrefixedString<read=this.string_value>;

typedef struct
{
    float x;
    float y;
    float z;
    
    byte extra_data[52];
} Vertex64<read=Str("(x = %f, y = %f, z = %f)", this.x, this.y, this.z)>;

typedef struct
{
    float x;
    float y;
    float z;

    float norm_x;
    float norm_y;
    float norm_z;
    
    float unknown_x;
    float unknown_y;
    float unknown_z;

    uint separator<format=hex>; // Always 0xffffffff

    float u_1;
    float v_1;
    float u_2;
    float v_2;

    float always_0_1;
    float always_0_2;

    uint maybe_some_index_index<format=hex>; // Usually 0xffffffff
} Vertex68<read=Str("(x = %f, y = %f, z = %f)", this.x, this.y, this.z)>;

typedef struct
{
    uint idx_1;
    uint idx_2;
    uint idx_3;

    ushort material_index;
} Face<read=Str("[%d, %d, %d] (Material #%d)", this.idx_1, this.idx_2, this.idx_3, this.material_index + 1)>;

typedef struct
{
    uint count;
} HeadElement<read=Str("(count: %d)", this.count)>;

typedef struct
{
    uint always_0;
    ushort bone_count;
    PrefixedString name;

    Elements elements(parentof(this).index_open); // VSBX, BPOS, BROT, EVNT
} BoneAnimationElement;

typedef struct
{
    local uint bone_count = parentof(parentof(parentof(this))).bone_count; // What a hack
    uint animation_count;

    struct PositionAnimationEntry
    {
        float offset; // In seconds, seems to be frame pos
        Vector3 positions[bone_count];
    } animation_entries[animation_count]<read=Str("(offset: %f)", this.offset), optimize=false>;
} BonePositionElement;

typedef struct
{
    local uint bone_count = parentof(parentof(parentof(this))).bone_count;
    uint animation_count;

    struct RotationAnimationEntry
    {
        float offset; // In seconds
        Vector4 positions[bone_count];
    } animation_entries[animation_count]<read=Str("(offset: %f)", this.offset), optimize=false>;
} BoneRotationElement;

typedef struct
{
    ushort always_0;
    uint event_count;

    struct EventAnimationEntry
    {
        float offset; // In seconds (probably)
        PrefixedString value;
    } event_entries[event_count]<read=Str("(offset: %f, value: %s)", this.offset, this.value.string_value), optimize=false>;
} EventElement;

typedef struct
{
    // Currently only seen in "Headliner_Fallen.anim"
    ushort name_count; // Always 1? Assuming is count
    if (name_count > 0) PrefixedString names[name_count]<optimize=false>;

    ushort unknown_count; // Not sure
    Elements elements(parentof(this).index_open); // VDEL, VMSK
} VAnimationElement;

typedef struct
{
    uint some_count;
    Vector3 some_vector;

    uint entry_count;
    struct VDelEntry
    {
        float offset; // In seconds?
        Vector3 pos_1;
        Vector3 pos_2; // Always (0.0, -1.0, -0.0)?
    } del_entries[entry_count]<optimize=false>;
} VDelElement;

typedef struct
{
    uint unknown_1; // Always 6?
    uint unknown_2; // Always 63?
} VMskElement;

typedef struct
{
    uint trans_count;
    Transform transforms[trans_count];
} VsbxElement<read=Str("(%d transforms)", this.trans_count)>;

typedef struct
{
    ushort always_0;
    uint material_count;

    local uint i;
    for (i = 0; i < material_count; i++)
    {
        Element materials; // MaterialElement
    }

    uint vert_count;
    ushort vert_size_type;

    if (vert_count > 0)
    {
        // 1F03 = 64 bytes
        // 9F03 = 68 bytes (Rigged models)
        switch (vert_size_type)
        {
            case 0x31F:
                Vertex64 vertices[vert_count];
                break;
            case 0x39F:
                Vertex68 vertices[vert_count];
                break;
            default:
                // Log error
                Assert(false, Str("Vert size type of %X is not supported", this.vert_size_type));
                break;
        }
    }

    uint face_count;
    if (face_count > 0) Face faces[face_count];
} GeometryElement<read=Str("(%d vertices, %d faces)", this.vert_count, this.face_count)>;

typedef struct
{
    ushort always_0;
    PrefixedString name;

    // Enum for transparency?
    // 10 = opaque
    uint always_10;
    float unknown_float_1;
    float spec_mul; // Not 100% sure
    float spec_exp;
    
    ushort always_0;
    
    PrefixedString diffuse_path;
    PrefixedString specular_map_path;
    PrefixedString normal_map_path;

    byte empty_data_1[12];
    uint unknown<format=hex>; // 0xFF000000
    
    byte empty_data_2[4];
    uint unknown<format=hex>; // 0xFF000000
    
    float parallax_scale;
    float parallax_bias;
    float unknown_float_2; // Always 0.0
} MaterialElement;

typedef struct
{
    uint weight_count;
    if (weight_count < 1) return;

    // 10 bytes
    struct Weight
    {
        uint vert_index;
        ushort bone_index;
        float value;
    } weights[weight_count]<read=Str("(vertex: %d, bone: %d, weight: %f)", this.vert_index, this.bone_index, this.value)>;
} WeightElement;

typedef struct
{
    ushort always_0;
    
    ushort bone_count;
    if (bone_count > 0)
    {
        struct Bone
        {
            PrefixedString name;
            ushort parent_bone_index; // 0xffff if root

            // pos (xyz) + quart (xyzw)?
            Transform transform_1; // World
            Transform transform_2; // Local
        } bones[bone_count]<optimize=false, read=this.name.string_value>;
    }

    ushort unknown_always_0;
} SkeletonElement;

typedef struct
{
    // Min/max 1
    float min_x;
    float min_y;
    float min_z;
    float max_x;
    float max_y;
    float max_z;

    float origin_x;
    float origin_y;
    float origin_z;
    float origin_distance_to_corner; // (sqrt(3) * max_side_length) / 2

    // Min/max 2 (same as 1)
    float min_x_2;
    float min_y_2;
    float min_z_2;
    float max_x_2;
    float max_y_2;
    float max_z_2;
} BoundsElement;

typedef struct
{
    ushort bone_count;
    if (bone_count < 1) return;

    PrefixedString properties[bone_count]<optimize=false>;
} CullBonePropertiesElement;

typedef struct
{    
    ushort bone_count;
    if (bone_count < 1) return;

    struct BoneBoundingBox
    {
        Vector3 corner_1;
        Vector3 corner_2;
    } bone_bounding_boxes[bone_count];
} BoneBoundingBoxElement;

typedef struct
{
    ubyte always_0;
    uint size;

    if (size > 0) byte data[size];
} RawBytesElement;

typedef struct
{
    uint entry_count;
    if (entry_count == 0) return;
    
    struct ResEntry
    {
        int unknown[6]; // Could be sizes or offsets?
    } res_entries[entry_count];
} ResourceElement;

// Root elements (typically)
typedef struct
{
    // HEAD
    ushort always_0;
    Element head; // Count is number of BoneAnimationElements (BANI)

    // SKEL, BANI, VANI
    // Note: Skeleton not always present
    Elements elements(parentof(this).index_open);
} AnimElement;

typedef struct
{
    // GEOM, BNDS
    // SKEL, WGHT, BBBX, CBPR, BNDS (for rigged models)
    ushort always_0;
    Elements elements(parentof(this).index_open);
} ModelElement;
// End root elements

typedef struct
{
    local string element_name = "Unknown";
    int index_open;
    Magic magic_open;
    uint size;
    
    local uint end_position = FTell() + size;
    
    switch (magic_open.value)
    {
        // Root elements
        case "ANIM":
            element_name = "Anim";
            AnimElement anim;
            break;
        case "MODL":
            element_name = "Model";
            ModelElement model;
            break;
        // End root elements
        // Animation related
        case "HEAD":
            element_name = "Head";
            HeadElement head;
            break;
        case "BANI":
            element_name = "BoneAnimation";
            BoneAnimationElement bone_animation;
            break;
        case "VSBX":
            element_name = "VSBX";
            VsbxElement vsbx;
            break;
        case "BPOS":
            element_name = "BonePosition";
            BonePositionElement bone_position;
            break;
        case "BROT":
            element_name = "BoneRotation";
            BoneRotationElement bone_rotation;
            break;
        case "EVNT":
            element_name = "Event";
            EventElement event;
            break;
        case "VANI":
            element_name = "VAnimation";
            VAnimationElement v_animation;
            break;
        case "VDEL":
            element_name = "VDelElement";
            VDelElement v_del;
            break;
        case "VMSK":
            element_name = "VMskElement";
            VMskElement v_msk;
            break;
        // End animation related
        // Model related
        case "GEOM":
            element_name = "Geometry";
            GeometryElement geometry;
            break;
        case "MTRL":
            element_name = "Material";
            MaterialElement material;
            break;
        case "WGHT":
            element_name = "Weight";
            WeightElement weight;
            break;
        case "SKEL": // Also used in rigged models
            element_name = "Skeleton";
            SkeletonElement skeleton;
            break;
        case "BNDS":
            element_name = "Bounds";
            BoundsElement bounds;
            break;
        case "CBPR":
            element_name = "CullBoneProperties";
            CullBonePropertiesElement bone_properties;
            break;
        case "BBBX":
            element_name = "BoneBoundingBoxes";
            BoneBoundingBoxElement bone_boxes;
            break;
        // End model related
        // Resources related
        case "RAWB":
            element_name = "RawBytes";
            RawBytesElement raw_bytes;
            break;
        case "RES_":
            element_name = "Resource";
            ResourceElement resource;
            break;
        // End resources related
        default:
            Printf("Warning: Uknown element type \"%s\"\n", this.magic_open.value);
            if (size > 0) byte data[size];
            break;
    }
    
    if (FTell() < end_position)
    {
        // Head element in "resources.vres" files has extra 4 bytes for some reason
        local uint remaining_size = end_position - FTell();
        byte extra_bytes[remaining_size];

        Printf("Warning: Unparsed %d bytes in \"%s\" element\n", this.remaining_size, this.element_name);
    }

    // Close tag
    int index_close;
    Magic magic_close;
} Element<read=Str("%s (%s)", this.element_name, this.magic_open.value)>;

typedef struct (int parent_index)
{
    local uint peek_index = ReadInt();
    while (peek_index > parent_index)
    {
        Element elements;
        peek_index = ReadInt();
    }
} Elements;

typedef struct
{
    char magic[4]; // "VBIN"
    ushort always_0;
    ushort always_1; // Not element count...

    Elements root_elements(-1);
    int terminating_index; // Always -1
} VBinFile;

VBinFile file;