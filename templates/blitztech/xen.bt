// Archive format for Karaoke Revolution on 360 (American Idol Encore)
// Minimal size = 8192

// Detect endianess...
BigEndian();
if (ReadInt(4) > 4096) LittleEndian();

/*
Tags:
 Name  | Prefix | Extension | Type
  _STR |        |  .str     |  Stream
  @STR |    __  |   __      |  Stream Index?
  ACTR |    o_  |           |  Actor
  ASTR |        |  .wav     |  Audio Stream Header?
  MTRL |  mat_  |           |  Material
  PSHR |   ps_  |           |  Pixel Shader?
  SAMP
  SBNK
  SPAT
  TEXR |    t_  |           |  Texture
  VSHR |   vs_  |           |  Vertex Shader?
*/

local string root_extension = "";

struct XenFile;

typedef struct (uint str_table_start, uint tag_table_start) // TODO: Pass in XenFile& instead
{
    uint block_offset; // Multiply by block size to get index
    uint hash<format=hex>;
    uint file_size_1;
    uint file_name_str_index;

    uint entry_type; // 0 = sys/dummy, 1 = file
    uint tag_index;
    uint file_size_2;
    uint unknown<format=hex>; // Sometimes 0?

    local string file_name = ReadString(str_table_start + file_name_str_index);
    local string tag = "SYSTEM";

    if (entry_type > 0)
    {
        tag = ReadString(tag_table_start + tag_index, 4);
    }
} FileEntry<read=Str("%s (%s)", this.file_name, this.tag)>;

typedef struct (string name, string tag)
{
    local uint start_offset = FTell();

    local string name = name;
    local string tag = tag;

    uint unknown<format=hex>; // Checksum maybe?
    uint chunk_size; // 16 (PC), 32 (GC), 2048 (GC), 4096 (X360)

    uint counts[13];

    //  0 - Some count? 0, 4, 22
    //    0 - Regular files?
    //    4 -
    //   22 -
    //  1 - File entry count 
    //  2 - File entry chunk index
    //  * Each entry is 32 bytes in file entry chunk *
    
    // TagTable.pak.sys (Not always present)
    //  3 - Unknown chunk index
    //  4 - Tag count (4 chars per tag) 3, 5

    //  5 - ??? 0

    // Updated:
    //  6 - Chunk index of file info?
    //    File structure: int[] { 0, total_chunk_count, 1 }
    //    ** Little endian for some reason **
    //    Not in file entries either

    //  6 - Chunk index to last file entry, not always preset
    //  7 - Always 1 (Chunk index to first file?)

    // FilenameTable.pak.sys
    //  8 - String table chunk index
    //  9 - String table size
    // 10 - File entries size

    // 11 - ??? 0
    // 12 - Size of chunk? (2933 index) 140

    // Index order: 5 or 11, 7, 4, 3, 8 (str table), 2, 6

    // String table
    local uint str_table_start = start_offset + (counts[8] * chunk_size);
    FSeek(str_table_start);
    byte string_table[counts[9]];

    local uint file_count = counts[1];

    local uint tag_table_start = start_offset + (counts[3] * chunk_size);

    local uint indices[5] = { 7, 4, 3, 2, 6 };
    local uint i;

    for (i = 0; i < 5; i++)
    {
        FSeek(start_offset + (counts[indices[i]] * chunk_size));

        if (i == 3)
        {
            // Read file entries
            struct FileEntries
            {
                local uint j;

                for (j = 0; j < file_count; j++)
                {
                    FileEntry entries(str_table_start, tag_table_start);
                }
            } file_entries;
            continue;
        }

        struct Chunk
        {
            byte data[chunk_size];
        } chunk;
    }

    // Read files

    FSeek(start_offset + chunk_size);
    struct Files
    {
        local uint file_offset;
        local uint file_size;
        local string file_name;
        local string file_tag;

        for (i = 0; i < file_count; i++)
        {
            file_offset = start_offset + (file_entries.entries[i].block_offset * chunk_size);
            file_size = file_entries.entries[i].file_size_1;
            file_name = file_entries.entries[i].file_name;
            file_tag = file_entries.entries[i].tag;

            FSeek(file_offset);

            if (Strstr(file_name, root_extension) > 0)
            {
                // Is nested scene file
                XenFile xen_file(file_name, file_tag);
                continue;
            }

            struct File
            {
                local uint offset = file_offset;
                local uint size = file_size;
                local string name = file_name;
                local string tag = file_tag;

                byte data[size];
            } file<read=Str("%s (%s)", this.name, this.tag)>;
        }
    } files;

} XenFile<read=Str("%s (%s)", this.name, this.tag)>;

local string root_file_name = FileNameGetBase(GetFileName());
root_extension = FileNameGetExtension(root_file_name);

XenFile file(root_file_name, "SYSTEM");