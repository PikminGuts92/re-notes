// A FET script is made up of type tokens that are interpreted as world, sector, and globalclasses blocks.
// Sector block can contain hierarchy of entity nodes

BigEndian();

struct FetToken;

typedef enum <ubyte>
{
    Unknown = 0, // 1-byte
    Integer8 = 1,
    Integer16 = 3,
    Integer32 = 4,
    Hex = 5, // Used for crc hash
    Float = 6,
    String = 7 // Null-terminated
} TOKEN_TYPE;

// fGetNextToken__17CFWorldFileParserPci
typedef struct
{
    TOKEN_TYPE type;

    switch (type)
    {
        case 0:
            ubyte value; // 129, 0xFF
            break;
        case 1:
            ubyte value;
            break;
        case 3:
            short value;
            break;
        case 4:
            int value;
            break;
        case 5:
            uint value<format=hex>;
            break;
        case 6:
            float value;
            break;
        case 7:
            string value;
            break;
        default:
            Printf("Warning: Unknown node type of %d\n", type);
            break;
    }
} FetToken<read=read_token>;

string read_token(FetToken& node)
{
    local string s;

    switch (node.type)
    {
        case 0:
            SPrintf(s, "%d (Int8_0)", node.value);
            break;
        case 1:
            SPrintf(s, "%d (Int8)", node.value);
            break;
        case 3:
            SPrintf(s, "%d (Int16)", node.value);
            break;
        case 4:
            SPrintf(s, "%d (Int32)", node.value);
            break;
        case 5:
            SPrintf(s, "%X (Hex)", node.value);
            break;
        case 6:
            SPrintf(s, "%f (Float)", node.value);
            break;
        case 7:
            SPrintf(s, "\"%s\" (String)", node.value);
            break;
    }

    return s;
}

// CFMode_World::ParseWorldBlock
typedef struct
{
    // Bitfields?
    FetToken num_1_0; // Int (1)
    FetToken num_1_1; // Int (1)

    FetToken num_2_0; // Int (0)
    FetToken num_2_1; // Int (0)
    FetToken num_2_2; // Int (0)
    FetToken num_2_3; // Int (0)

    // Skipped tokens
    FetToken skip_1;
    FetToken skip_2;

    FetToken num_3_0; // Int (3, 4)
    FetToken num_3_1; // Int (100, 4096)
    FetToken num_3_2; // Int (100, 4096)
    FetToken num_3_3; // Int (0)
    FetToken num_3_4; // Int (0)
    FetToken num_3_5; // Int (0)

    FetToken num_4_0; // Float (100)

    FetToken num_5_0; // Int (0)
    FetToken num_5_1; // Int (0)
    FetToken num_5_2; // Int (3)

    // if (num_5_2 != 0) CreateLightingRig__12CFMode_WorldiUc

    FetToken some_token; // String (empty)

    FetToken num_6_0; // Do something if not 0

    FetToken some_count; // Int

    FetToken num_7_0; // Float
    FetToken num_7_1; // Float
    FetToken num_7_2; // Float
    FetToken num_7_3; // Float
    FetToken num_7_4; // Float
    FetToken num_7_5; // Float

    FetToken num_8_0; // Do something if not 0
} WorldBlock;

// fGetNextEntityClass__17CFWorldFileParseri
typedef struct
{
    FetToken class; // String (Credits World Sector, null)

    if (class.value != "<noentclass>")
    {
        FetToken num_1; // Int (1, 95)

        FetToken key_1; // Hex (Always 0?)
        FetToken key_2; // Hex

        // Tokens are skipped if entity factory not resolved
        FetToken token_count; // Int
        FetToken skipped_tokens[token_count.value]<optimize=false>;
    }
} EntityClass<read=this.class.value>;

// ParseNode__11CFWorldNodeP12CFMode_World
typedef struct
{
    FetToken type; // 1

    if (type.value == 1)
    {
        // CFTransformU 4x4 floats
        /*
            0 0 0 1
            0 0 0 1
            1 1 1 1
        */
        FetToken trans[10]<optimize=false>; // Floats
    }
    else if (type.value == 2)
    {
        // CFSplineTransformP17CFWorldNodeSpline 10 floats?
        Printf("TODO: WorldNodeSpline found\n");
        FetToken unknown_token; // String
        FetToken unknown_float; // Float
    }

    FetToken unknown; // Int
    FetToken num_1[6]<optimize=false>; // Float
    FetToken num_2[4]<optimize=false>; // Int
    FetToken num_3; // Hex

    FetToken num_4; // Int
    FetToken num_5; // Float
    FetToken num_6; // Int
    FetToken num_7; // Int
    FetToken num_8; // Hex

    FetToken num_9[6]<optimize=false>; // Int

    FetToken num_10; // Int
    FetToken num_11; // Int

    // Do something if either num_10 or num_11 values are not 0...
    if (num_11.value != 0)
    {
        Printf("TODO: fParseActionList__17CFWorldFileParseri\n");
    }

    FetToken num_12; // Int
    if (num_12.value != 0)
    {
        Printf("TODO: Parse num_12 part of WorldNode\n");
    }
} WorldNode;

// ParseNode__19CFWorldNodeAdvancedP12CFMode_World
typedef struct
{
    WorldNode base;

    FetToken num_1; // Int
    FetToken num_2; // Int
    // if (num_1 != 0) set 0xb0 = num_2

    FetToken num_3; // Int
    FetToken num_4; // Int
    // if (num_3 != 0) set 0xb1 = num_4

    FetToken num_5; // Int
    FetToken num_6; // Int
    // if (num_5 != 0) set 0xb2 = num_6

    FetToken num_7; // Int
    FetToken num_8; // Int
    // if (num_7 != 0) set 0xb3 = num_8

    FetToken num_9;  // Hex
    FetToken num_10; // Hex

    FetToken num_11; // Int
    FetToken num_12; // Float
    /*
        if (num_11 == 0) set 0xbc = 0.0
        else set 0xbc = (num_12 * num_12)
    */

    EntityClass entity;
    FetToken num_13; // Int
} WorldNodeAdvanced;

// ParseNode__21CFWorldNodeOverlaySetP12CFMode_World
typedef struct
{
    WorldNodeAdvanced base;

    FetToken num_1[4]<optimize=false>; // Float
    FetToken num_2; // Int
    FetToken num_3; // Int

    // A bunch of floating-point calculations are done conditionally on num_3 value...
} WorldNodeOverlaySet;

// ParseNode__18CFWorldNodeOverlayP12CFMode_World
typedef struct
{
    WorldNode base;

    FetToken num_1; // Int
    FetToken num_2; // Int
    // if (num_1 != 0) set 0x16c = num_2

    EntityClass entity;

    FetToken num_3[4]<optimize=false>; // Float
    FetToken num_4; // Int
} WorldNodeOverlay;

// ParseNode__25CFWorldNodeTextureOverlayP12CFMode_World
typedef struct
{
    WorldNodeOverlay base;

    FetToken val_1; // String
    FetToken val_2[6]<optimize=false>; // Int
    FetToken val_3[4]<optimize=false>; // Float

    // A bunch more math here too...
} WorldNodeTextureOverlay;

// ParseNode__20CFWorldNodeDataTableP12CFMode_World
typedef struct
{
    WorldNode base;

    FetToken entity_count; // Int
    if (entity_count.value > 0) EntityClass entities[entity_count.value]<optimize=false>;
} WorldNodeDataTable;

struct NodeList;

typedef struct (int input_count_1, int input_count_2)
{
    local byte is_broken = 0;

    FetToken token_1; // String

    // Hmm... need fNodeTypeInfo from somewhere...

    FetToken token_2; // String
    // FetToken token_3; // String (peeked, not taken at this point)

    EntityClass entity;

    FetToken token_3; // String (null)

    switch (token_1.value)
    {
        case "datatable":
            WorldNodeDataTable data;
            break;
        case "overlayset":
            WorldNodeOverlaySet data;
            break;
        case "textureoverlay":
            WorldNodeTextureOverlay data;
            break;
        default:
            Printf("Warning: Unknown node type of \"%s\"\n", token_1.value);
            is_broken = 1;
            return;
    }

    // Read children nodes?
    FetToken num_1; // Int

    if (num_1.value != 0)
    {
        NodeList node(0, 0);
    }
} Node;

// ParseNodeList__12CFMode_WorldP11CFWorldNodeP13CFWorldSectorP15CFWorldNodeRoom
typedef struct (int input_count_1, int input_count_2)
{
    FetToken node_count; // Int

    local int i = 0;
    while (i < node_count.value)
    {
        Node nodes(input_count_1, input_count_2);

        if (nodes[i].is_broken) break; // Early exit if can't parse

        i += 1;
        //break;
    }
} NodeList;

// CFMode_World::ParseSectorBlock
typedef struct
{
    FetToken unknown_str; // String (World)

    EntityClass entity;

    FetToken unknown_str_2; // String (null)

    // Register new sector factory if not null?

    FetToken num_1_0; // Int
    FetToken num_1_1; // Int
    FetToken num_1_2; // Int
    FetToken num_1_3; // Int
    FetToken num_1_4; // Int
    FetToken num_1_5; // Int
    FetToken num_1_6; // Int
    FetToken num_1_7; // Int

    FetToken num_2_0; // Float
    FetToken num_2_1; // Float
    FetToken num_2_2; // Float

    FetToken num_3_0; // Int
    FetToken num_3_1; // Int
    FetToken num_3_2; // Int
    FetToken num_3_3; // Int
    FetToken num_3_4; // Int

    FetToken num_4_0; // Int
    FetToken num_4_1; // Int
    FetToken num_4_2; // Int
    FetToken num_4_3; // Int
    FetToken num_4_4; // Int
    FetToken num_4_5; // Int
    FetToken num_4_6; // Int
    FetToken num_4_7; // Int

    FetToken num_5_0; // Int
    FetToken num_5_1; // Int

    if ((num_5_1.value & 1) != 0) FetToken num_5_2; // Hex

    // if (unknown_str == "World") update fields...?

    FetToken num_6_0; // Float
    FetToken num_6_1; // Float
    FetToken num_6_2; // Float
    FetToken num_6_3; // Float
    FetToken num_6_4; // Float
    FetToken num_6_5; // Float

    FetToken num_7_0; // Int
    // if (num_7_0 != 0) read a bunch of stuff

    if (num_7_0.value != 0)
    {
        Printf("TODO: Unknown num_7_0 value of %d\n", num_7_0.value);
    }

    // Parse node list?
    FetToken num_8_0; // Int
    if (num_8_0.value != 0)
    {
        // ParseNodeList__12CFMode_WorldP11CFWorldNodeP13CFWorldSectorP15CFWorldNodeRoom
        NodeList node(0, 0);
    }
} SectorBlock;

// CFMode_World::Update_ParsingScript
typedef struct
{
    //FetToken node;
    //return;

    /*while (!FEof())
    {
        FetToken node;
    }*/

/*
    version (int8)
        124 spongebob cftkk (GC)
        149 krpaie
    timestamp (string)
    minor_version (int8)
        2
    unknown_number
         1000
        14000
        95000

    begin world blocks...
*/

    // ParseFETHeader__12CFMode_WorldPCcUi
    struct FetHeader
    {
        /* 0x84 */ FetToken version;
        FetToken timestamp; // Max: 132 chars?

        if (version.value >= 0x7C) // 124
        {
            FetToken minor_version;
            if (minor_version.value >= 2) /* 0x310 */ FetToken unknown;
        }
    } header;

    // CFMode_World::ParseFETData
    struct FetData
    {
        while (!FEof())
        {
            FetToken token;

            if (token.type == String)
            {
                switch (token.value)
                {
                    case "world":
                        WorldBlock world;
                        break;
                    case "sector":
                        SectorBlock sector;
                        //break;
                        return;
                    case "end":
                        return;
                }
            }
        }
    } data;
} FetFile;

FetFile file;