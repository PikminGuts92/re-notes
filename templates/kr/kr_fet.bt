BigEndian();

struct KrNode;

typedef enum <ubyte>
{
    Unknown = 0, // 1-byte
    Integer8 = 1,
    Integer16 = 3,
    Integer32 = 4,
    UInteger32 = 5, // Used as hash key?
    Float = 6,
    String = 7 // Null-terminated
} KR_NODE_TYPE;

typedef struct
{
    KR_NODE_TYPE type;

    switch (type)
    {
        case 0:
            ubyte value; // 129, 0xFF
            break;
        case 1:
            ubyte value;

            /*
                0 = null/terminate
                1 = value pair?
            */

            //local uint count = value;
            
            //KrNode children[count]<optimize=false>;
            break;
        case 3:
            short value;
            break;
        case 4:
            int value;
            break;
        case 5:
            uint value<format=hex>;
            break;
        case 6:
            float value;
            break;
        case 7:
            string value;
            break;
        default:
            Printf("Warning: Unknown node type of %d\n", type);
            break;
    }
} KrNode<read=read_kr_node>;

string read_kr_node(KrNode& node)
{
    local string s;

    switch (node.type)
    {
        case 0:
            SPrintf(s, "%d (Int8_0)", node.value);
            break;
        case 1:
            SPrintf(s, "%d (Int8)", node.value);
            break;
        case 3:
            SPrintf(s, "%d (Int16)", node.value);
            break;
        case 4:
            SPrintf(s, "%d (Int32)", node.value);
            break;
        case 5:
            SPrintf(s, "%X (UInt32)", node.value);
            break;
        case 6:
            SPrintf(s, "%f (Float)", node.value);
            break;
        case 7:
            SPrintf(s, "\"%s\" (String)", node.value);
            break;
    }

    return s;
}

typedef struct
{
    //KrNode node;
    //return;

    while (!FEof())
    {
        KrNode node;
    }
} KrFetFile;

KrFetFile file;