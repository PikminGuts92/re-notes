#include "milo_common.bt"

LittleEndian();

struct ArkFile;

typedef struct
{
    uint fileCount;
    NumString files[fileCount]<optimize=false>;
} FileCollection;

typedef struct
{
    uint64 offset;
    NumString fullPath;
    uint flags;
    uint size;
    uint hash;
} Ark9Entry;

typedef struct
{
    uint64 offset;
    NumString fullPath;
    uint flags;
    uint size;
} Ark10Entry;


typedef struct
{
    char value[16];
} Hash;

typedef struct
{
    uint hashCount;
    Hash hashes[hashCount];
} HashCollection;

typedef struct (ArkFile& ark)
{
    uint partCount; // Both should match
    uint sizeCount;

    if (ark.version == 4)
    {
        // Hacky way to check if v4 is v3/v5 hybrid
        ark.brokenV4 = ReadUInt64(FTell() + ((partCount - 1) * 8)) > (uint)0xFFFFFFFF;

        if (!ark.brokenV4) uint64 sizes[sizeCount];
        else uint sizes[sizeCount];
    }
    else
    {
        uint sizes[sizeCount];
    }
    
    local int i;
    local uint64 totalSize = 0;

    // Compute total size
    for (i = 0; i < sizeCount; i++)
        totalSize += sizes[i];
} PartSizeCollection<read=getPartSizeCollectionText>;

string getPartSizeCollectionText(PartSizeCollection& psc)
{
    local string s;
    SPrintf(s, "%d Parts (%Ld total bytes)", psc.sizeCount, psc.totalSize);
    return s;
}

typedef struct
{
    uint arkPathsCount;
    NumString arkPaths[arkPathsCount]<optimize=false>;
} ArkPathCollection;

typedef struct
{
    uint blobSize;
    char stringBlob[blobSize];
} StringBlob;


typedef struct (uint start)
{
    uint offset;
    local string value = ReadString(start + offset);
} StringOffset<read=getStringOffsetText>;

string getStringOffsetText(StringOffset& so)
{
    return so.value;
}

typedef struct (uint startOffset)
{
    uint stringCount;
    
    local int i;
    for (i = 0; i < stringCount; i++)
    {
        StringOffset stringOffsets(startOffset);
    }
} StringOffsetCollection;

typedef struct (int version, StringOffsetCollection& stringCollection)
{
    // TODO: Refactor this to make better sense
    if (version != 4 && version != 5 && version != 6)
        int offset;
    else
        uint64 offset;

    int fileNameIdx;
    int directoryPathIdx;
    uint size;
    uint inflatedSize; // 0 if not compressed

    local string fileName = (fileNameIdx >= 0)
        ? stringCollection.stringOffsets[fileNameIdx].value
        : "";

    local string directoryPath = (directoryPathIdx >= 0)
        ? stringCollection.stringOffsets[directoryPathIdx].value
        : "";
} ArkEntry<read=getArkEntryText>;

string getArkEntryText(ArkEntry& ae)
{
    local string s;
    if (ae.directoryPathIdx >= 0)
        SPrintf(s, "%s/%s", ae.directoryPath, ae.fileName);
    else
        SPrintf(s, "%s", ae.fileName);
    return s;
}

typedef struct (int version, StringOffsetCollection& stringCollection)
{
    uint entryCount;
    
    local int i;
    for (i = 0; i < entryCount; i++)
    {
        ArkEntry entries(version, stringCollection);
    }
} ArkEntryCollection;

/*int getArkPart(uint64 offset, partSizeCollection& partCollection)
{
    uint64 current = 0;
    local int i;
    
    while (offset <= current)
    {
        current += offset;
        i++;
    }

    return i - 1;
}*/

typedef struct (ArkEntry& entry)
{
    local int directoryPathIdx = entry.directoryPathIdx;
    local string directoryPath = entry.directoryPath;
    local string fileName = entry.fileName;

    FSeek(entry.offset);
    byte data[entry.size];
} ArchivedFile<read=getArchivedFileText>;

string getArchivedFileText(ArchivedFile& af)
{
    local string s;
    if (af.directoryPathIdx >= 0)
        SPrintf(s, "%s/%s", af.directoryPath, af.fileName);
    else
        SPrintf(s, "%s", af.fileName);
    return s;
}

typedef struct (ArkEntryCollection& entryCollection)
{
    local int i;
    for (i = 0; i < entryCollection.entryCount; i++)
    {
        ArchivedFile files(entryCollection.entries[i]);
    }
} ArchivedFiles;

struct ArkFile
{
    int version;
    local ubyte brokenV4 = false;

    if (version < 3)
    {
        // Amp/KR structure
        // Ark entries, string blob, string indices
        local uint str_offset = FTell() + (ReadInt() * 20) + 4;
        FSeek(str_offset);
        
        StringBlob stringBlob;
        StringOffsetCollection stringOffsetCollection(str_offset + 4);
        local uint files_offset = FTell();

        FSeek(4);
        ArkEntryCollection arkEntryCollection(version, stringOffsetCollection);
        
        FSeek(files_offset);
        ArchivedFiles archive(arkEntryCollection);
        return;
    }
    
    if (version >= 6)
        HashCollection hashCollection;
    
    PartSizeCollection partSizeCollection(this);
    
    if (version >= 5 || brokenV4)
        ArkPathCollection arkPathCollection;
    
    if (version >= 6 && version <= 9)
    {
        // More checksums?
        uint unknown1Count;
        uint unknown1[unknown1Count];
    }
    
    if (version >= 7)
    {
        // Collection of certain files from each ark part?
        uint fileCollectionCount;
        FileCollection fileCollections[fileCollectionCount]<optimize=false>;
    }
    
    if (version <= 7)
    {
        // Classic file structure
        // String blob, string indices, ark entries
        local uint startOffset = FTell() + 4;
        StringBlob stringBlob;

        local int entryVersion = (brokenV4) ? 3 : version;
        
        StringOffsetCollection stringOffsetCollection(startOffset);
        ArkEntryCollection arkEntryCollection(entryVersion, stringOffsetCollection);
    }
    else
    {
        // New structure
        uint entryCount;
        if (version <= 9)
        {
            Ark9Entry entries[entryCount]<optimize=false>;
        }
        else
        {
            Ark10Entry entries[entryCount]<optimize=false>;
        }
    
        uint entryCount2;
        uint entries2[entryCount2];
    }
};

ArkFile ark;