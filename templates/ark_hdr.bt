#include "milo_common.bt"

typedef struct
{
    uint fileCount;
    NumString files[fileCount]<optimize=false>;
} FileCollection;

typedef struct
{
    uint64 offset;
    NumString fullPath;
    uint flags;
    uint size;
    uint hash;
} Ark9Entry;

typedef struct
{
    uint64 offset;
    NumString fullPath;
    uint flags;
    uint size;
} Ark10Entry;


typedef struct
{
    char value[16];
} Hash;

typedef struct
{
    uint hashCount;
    Hash hashes[hashCount];
} HashCollection;

typedef struct (int version)
{
    uint partCount; // Both should match
    uint sizeCount;

    if (version == 4)
        uint64 sizes[sizeCount];
    else
        uint sizes[sizeCount];
    
    local int i;
    local uint64 totalSize = 0;
    
    for (i = 0; i < sizeCount; i++)
        totalSize += sizes[i];
} PartSizeCollection<read=getPartSizeCollectionText>;

string getPartSizeCollectionText(PartSizeCollection& psc)
{
    local string s;
    SPrintf(s, "%d Parts (%Ld total bytes)", psc.sizeCount, psc.totalSize);
    return s;
}

typedef struct
{
    uint arkPathsCount;
    NumString arkPaths[arkPathsCount]<optimize=false>;
} ArkPathCollection;

typedef struct
{
    uint blobSize;
    char stringBlob[blobSize];
} StringBlob;


typedef struct (uint start)
{
    uint offset;
    local string value = ReadString(start + offset);
} StringOffset<read=getStringOffsetText>;

string getStringOffsetText(StringOffset& so)
{
    return so.value;
}

typedef struct (uint startOffset)
{
    uint stringCount;
    
    local int i;
    for (i = 0; i < stringCount; i++)
    {
        StringOffset stringOffets(startOffset);
    }
} StringOffsetCollection;

typedef struct (int version, StringOffsetCollection& stringCollection)
{
    // TODO: Refactor this to make better sense
    if (version != 4 && version != 5 && version != 6)
        int offset;
    else
        uint64 offset;

    uint fileNameIdx;
    uint directoryPathIdx;
    uint size;
    uint inflatedSize; // 0 if not compressed

    local string fileName = stringCollection.stringOffets[fileNameIdx].value;
    local string directoryPath = stringCollection.stringOffets[directoryPathIdx].value;
} ArkEntry<read=getArkEntryText>;

string getArkEntryText(ArkEntry& ae)
{
    local string s;
    SPrintf(s, "%s/%s", ae.directoryPath, ae.fileName);
    return s;
}

typedef struct (int version, StringOffsetCollection& stringCollection)
{
    uint entryCount;
    
    local int i;
    for (i = 0; i < entryCount; i++)
    {
        ArkEntry entries(version, stringCollection);
    }
} ArkEntryCollection;

/*int getArkPart(uint64 offset, partSizeCollection& partCollection)
{
    uint64 current = 0;
    local int i;
    
    while (offset <= current)
    {
        current += offset;
        i++;
    }

    return i - 1;
}*/

struct ArkFile
{
    int version;
    
    if (version >= 6)
        HashCollection hashCollection;
    
    PartSizeCollection partSizeCollection(version);
    
    if (version >= 5)
        ArkPathCollection arkPathCollection;
    
    if (version >= 6 && version <= 9)
    {
        // More checksums?
        uint unknown1Count;
        uint unknown1[unknown1Count];
    }
    
    if (version >= 7)
    {
        // Collection of certain files from each ark part?
        uint fileCollectionCount;
        FileCollection fileCollections[fileCollectionCount]<optimize=false>;
    }
    
    if (version <= 7)
    {
        // Classic file structure
        local uint startOffset = FTell() + 4;
        StringBlob stringBlob;
        
        StringOffsetCollection stringOffsetCollection(startOffset);
        ArkEntryCollection arkEntryCollection(version, stringOffsetCollection);
    }
    else
    {
        // New structure
        uint entryCount;
        if (version <= 9)
        {
            Ark9Entry entries[entryCount]<optimize=false>;
        }
        else
        {
            Ark10Entry entries[entryCount]<optimize=false>;
        }
    
        uint entryCount2;
        uint entries2[entryCount2];
    }
};

ArkFile ark;