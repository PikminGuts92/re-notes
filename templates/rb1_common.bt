#include "milo_common.bt"

#include "rb_charclipsamples.bt"
#include "rb_charlipsync.bt"
#include "tbrb_propanim.bt"
#include "tbrb_p9songpref.bt"

#ifndef RB1_COMMON
#define RB1_COMMON

// An ObjectDir keeps track of a set of Objects.
// Super: (None)
// Ext: (None)

struct ObjectDir
{
    int version; // Always 22
    int always0; // Always 2
    NumString name;
    
    int matEntryCount; // Usually 7
    Matrix matEntries[matEntryCount];
    
    int usually0; // 0, 7
    Bool alwaysTrue; // When true, sub directories?
    int always0;
    
    int importedMiloCount;
    NumString importedMilos[importedMiloCount]<optimize=false>;
    
    // Both are usually empty
    //NumString rndDirName; // Self-referening? Can be any base class
    //NumString mainTrans; // splash.cam
    
    Bool alwaysFalse; // Seems to be true when sub directory
    int subDirCount;
    NumString subDirs[subDirCount]<optimize=false>; // Appears in reverse order?

    // List file entries...
    //ObjectDir dir2;
    
    //byte zeroes[13];
};

// For GDRB
struct CharClipSet
{
    int version; // Always 25
    int always22; // Always 22

    int always2;
    NumString name;
    
    int matEntryCount; // Usually 7
    Matrix matEntries[matEntryCount];
    
    int usually0; // 0, 7
    Bool alwaysTrue; // When true, sub directories?
    int always0;
    
    int importedMiloCount;
    NumString importedMilos[importedMiloCount]<optimize=false>;
    
    // Both are usually empty
    //NumString rndDirName; // Self-referening? Can be any base class
    //NumString mainTrans; // splash.cam
    
    Bool alwaysFalse;
    int subDirCount;
    NumString subDirs[subDirCount]<optimize=false>;

    // List file entries...
    //ObjectDir dir2;
    
    byte data[25]; // TODO: Figure out
};

struct PanelDir
{
    int always7;
    int always10;
    
    ObjectDir baseDir;
    byte data[180]; // TBRB demo
};

struct RndDir
{
    int always13;
    ObjectDir baseDir;
};

struct SynthDir
{
    int always_idk;
    ObjectDir baseDir;
};

struct WorldDir
{
    int version; // Always 18
    
    //Vector3 origin; // Always (0, 1, 0) ?
    int always0;
    float always1;
    NumString unknownStr;
    
    int always7;
    int always10;
    
    ObjectDir baseDir;
    //byte data[265];
};

struct MiloEntry
{
    NumString type;
    NumString name;

    local uint offset;
    local uint size;
};

struct MiloDir
{
    uint version; // Always 25?
    NumString type;
    NumString name;
    uint count1;
    uint count2;
    uint entryCount;
    MiloEntry entries[entryCount]<optimize=false>;
    
    local Bool derived;
    local Bool skipParse = false;

    switch (type.text)
    {
        default:
            // Skip data for now
            local uint fileSize = findNextFile(adde);
            byte rawEntryData[fileSize];
            FSkip(4);
            //FSkip(fileSize + 4);
            skipParse = true;
            break;
        case "ObjectDir":
            ObjectDir dir;
            derived = False;
            break;
        /*case "CharClipSet":
            CharClipSet dir;
            derived = False;
            break;*/
        /*case "PanelDir":
            PanelDir dir;
            derived = True;
            break;*/
        case "RndDir":
            RndDir dir;
            derived = True;
            break;
        case "SynthDir":
            SynthDir dir;
            derived = True;
            break;
        case "WorldDir":
            WorldDir dir;
            derived = True;
            break;
    }
    
    /*
    
    for (local int i = 0; i < dir.subDirCount; i++)
    {
        ObjectDir subDirs;
        break;
    }*/
    //ObjectDir subDirs;
};


typedef struct (MiloDir& milo, char type[], char name[], uint size)
{
    // milo.type.text, milo.name.text
    local string dirType = milo.type.text;
    local string dirName = milo.name.text;
    local string type = type;
    local string name = name;

    local uint current = FTell();

    /*if (dirType == "PanelDir")
    {
        byte data[size];
        uint padding<format=hex>;
        return;
    }*/

    switch (type)
    {
        /*case "CharClipSamples":
            CharClipSamples charClipSamples;
            FSeek(current + size);
            break;*/
        case "CharLipSync":
            CharLipSync charLipSync;
            FSeek(current + size);
            break;
        case "P9SongPref":
            P9SongPref songPref;
            FSeek(current + size);
            break;
        case "PropAnim":
            PropAnim propAnim;
            FSeek(current + size);
            break;
        default:
            byte data[size];
            break;
    }
    
    uint padding<format=hex>;
} Blob<read=getFileName>;

string getFileName(Blob& blob)
{
    return blob.dirName + " >> " + blob.type + " | " + blob.name;
}

void readMiloEntries(MiloDir& milo)
{
    local uint i;
    local uint fileSize;
    local uint startOffset = FTell();

    for (i = 0; i < milo.entryCount; i++)
    {
        fileSize = findNextFile(adde);
        if (fileSize == -1) break;
    
        //byte file[fileSize];
        milo.entries[i].offset = FTell();
        milo.entries[i].size = fileSize;
        FSkip(fileSize + 4);
    }

    i = 0;
    FSeek(startOffset);

    
    
    for (i = 0; i < milo.entryCount; i++)
    {
        Blob files(milo, milo.entries[i].type.text, milo.entries[i].name.text, milo.entries[i].size);
        //Blob files("", "", milo.entries[i].size);
        //break;
    }
}

void readMiloDir(MiloDir& milo)
{
    local int i;
    local int subDirCount = 0;
    
    if (milo.skipParse == False)
    {
        subDirCount = milo.derived == True
            ? milo.dir.baseDir.subDirCount
            : milo.dir.subDirCount;
    }

    for (i = 0; i < subDirCount; i++)
    {
        MiloDir subDir;
        readMiloDir(subDir);
        //byte zeroes[13];
        //FSkip(17);

        //break;
    }
    
    if (milo.skipParse == False)
    {
        FSkip(17);
    }
    readMiloEntries(milo);
}

struct MiloFile
{
    MiloDir dir;
    readMiloDir(dir);
};

#endif