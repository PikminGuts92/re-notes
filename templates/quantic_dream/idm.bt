BigEndian(); // DBH appears to be LE

typedef struct
{
    uint size;
    local string text = "";

    if (size > 0)
    {
        char value[size];
        text = value;
    }
} String<read=this.text>;

typedef struct
{
    char magic[20]; // QUANTICDREAMTABIDMEM
    local uint start_offset = FTell();
    
    uint version_1; // 0x0000FFFF = Heavy Rain, 0 = Beyond Two Souls
    uint entry_count;
    
    uint version_2; // 0 = Heavy Rain
    
    struct Entries
    {
        uint unknown;
        uint file_count;
        uint offset; // Starts at offset 20, after magic
    } entries[entry_count]<read=Str("unk: %d, files: %d, offset: %d", this.unknown, this.file_count, this.offset), optimize=false>;
    
    local uint i = 0;
    struct EntryFile
    {
        local uint file_count = entries[i].file_count;

        uint some_table[256];
        
        struct File
        {
            uint unknown;
            uint offset;
            uint size;
            uint inflated_size;
            byte dat_index;
            byte padding[3];
            
            local string dat_ext = dat_index == 0 ? ".dat" : Str(".d%02d", dat_index);
            local string compressed = inflated_size == 0 ? "" : " [compressed]";
            
        } files[file_count]<read=Str("offset: %d, size: %d, ext: %s (%d)%s", this.offset, this.size, this.dat_ext, this.unknown, this.compressed), optimize=false>;
        
        i += 1;
    } entry_files[entry_count]<read=Str("files: %d", this.file_count), optimize=false>;
} IdmFile;

IdmFile file;