// Animate any properties on target object
// Super: Anim
// Ext: .anim
// C++ Class: RndPropAnim

#ifndef IN_MILO_FILE
    #ifndef STANDALONE_FILE
        #define STANDALONE_FILE "PropAnim"
    #endif
#endif

#ifndef OBJECT_PROP_ANIM
#define OBJECT_PROP_ANIM

#include "anim.bt"
#include "common.bt"

typedef enum <int>
{
    kPropFloat,
    kPropColor,
    kPropObject,
    kPropBool,
    kPropQuat,
    kPropVector3,
    kPropSymbol
} PropType;

typedef struct
{
    float value;
    float pos;
} AnimEventFloat<read=Str("Pos: %.2f, Value: %.2f", this.pos, this.value)>;

typedef struct
{
    Color4 value;
    float pos;
} AnimEventColor<read=Str("Start: %.2f, Value: %s", this.pos, readColor4(this.value))>;

typedef struct
{
    NumString text1;
    NumString text2;
    float pos;
} AnimEventObject<read=Str("Start: %.2f, Value: %s (%s)", this.pos, read_num_string(this.text1), read_num_string(this.text2))>;

typedef struct
{
    Bool value;
    float pos;
} AnimEventBool<read=Str("Pos: %.2f, Value: %s", this.pos, readBoolString(this.value))>;

typedef struct
{
    Quat value;
    float pos;
} AnimEventQuat<read=Str("Start: %.2f, Value: %s", this.pos, read_quat(this.value))>;

typedef struct
{
    Vector3 value;
    float pos;
} AnimEventVector3<read=Str("Start: %.2f, Value: %s", this.pos, readVector3(this.value))>;

typedef struct
{
    NumString text;
    float pos;
} AnimEventSymbol<read=Str("Start: %.2f, Value: %s", this.pos, read_num_string(this.text))>;

typedef struct (int version)
{
    PropType type1;
    PropType type2; // Should match type1

    NumString target;

    DTB property;

    int interpolation; // 0, 1, 2, 4
    NumString interp_handler; // Usually empty

    int unknown_enum; // 0, 1, 2, 3, 5, 6

    if (version >= 13)
    {
        Bool unknown_bool; // Always false?
    }

    // "keys"
    int event_count;
    switch (type1)
    {
        case 0:
            AnimEventFloat events[event_count];
            break;
        case 1:
            AnimEventColor events[event_count];
            break;
        case 2:
            AnimEventObject events[event_count]<optimize=false>;
            break;
        case 3:
            AnimEventBool events[event_count];
            break;
        case 4:
            AnimEventQuat events[event_count];
            break;
        case 5:
            AnimEventVector3 events[event_count];
            break;
        case 6:
            AnimEventSymbol events[event_count]<optimize=false>;
            break;
    }
} PropKeys<read=read_prop_keys>;

string read_prop_keys(PropKeys& prop_keys)
{
    local string property = "";
    if (exists(prop_keys.property.root.children[0].value))
    {
        // Hacky way to get symbol value. Probably won't work all the time.
        // Better solution would be true dtb -> dta conversion
        property = read_num_string(prop_keys.property.root.children[0].value);
    }

    return Str("%s | %s | %s (%d events)", read_num_string(prop_keys.target), property, EnumToString(prop_keys.type1), prop_keys.event_count);
}

typedef struct (SystemInfo& info, Bool super)
{
    int version; // 11 (TBRB), 12 (GDRB), 13 (DC1)
    read_metadata(info, super);

    Anim anim(info, True);

    if (version == 12)
    {
        // True for peacemaker media...
        Bool usually_false;
    }

    int prop_keys_count;
    if (prop_keys_count > 0)
    {
        local int i;
        for (i = 0; i < prop_keys_count; i++)
        {
            PropKeys keys(version);
        }
    }

    if (version >= 13)
    {
        Bool unknown; // Always false?
    }
} PropAnim;

#ifdef STANDALONE_FILE

if (STANDALONE_FILE == "PropAnim")
{
    local int obj_version = guess_version();
    local SystemInfo info;
    info.version = 25;

    if (IsBigEndian())
    {
        info.platform = X360;
    }
    else
    {
        info.platform = PS2;
    }

    PropAnim prop_anim(info, False);
}

#endif

#endif