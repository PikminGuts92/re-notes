// A clip of animation that you can play. We expect subclasses for stuff like compression
// Super: (None)
// Ext: (None)
// C++ Class: CharClip

#ifndef IN_MILO_FILE
    #ifndef STANDALONE_FILE
        #define STANDALONE_FILE "CharClip"
    #endif
#endif

#ifndef OBJECT_CHAR_CLIP
#define OBJECT_CHAR_CLIP

#include "common.bt"

typedef struct
{
    // Guessing fields
    float frame;
    float weight;
} ClipNodeFloats<read=read_clip_node_floats_string>;

string read_clip_node_floats_string(ClipNodeFloats& floats)
{
    local string s;
    SPrintf(s, "Start: %.2f, Value: %.3f", floats.frame, floats.weight);
    return s;
}

typedef struct
{
    NumString name;
    uint float_count;
    
    if (float_count > 0)
    {
        ClipNodeFloats floats[float_count];
    }
} ClipNode<read=read_clip_node_string>;

string read_clip_node_string(ClipNode& node)
{
    local string s;
    SPrintf(s, "%s (%d frames)", node.name.text, node.float_count);
    return s;
}

typedef struct
{
    NumString name;
    int vec_count; // Usually 1
        
    if (vec_count > 0)
    {
        Vector2 vecs[vec_count];
    }
} ClipEvent;

typedef struct
{
    int count;

    if (count > 0)
    {
        ClipEvent events[count]<optimize=false>;
    }
} ClipEvents;

typedef struct
{
    float frame;
    NumString script;
} FrameEvent<read=read_frame_event_string>;


string read_frame_event_string(FrameEvent& fe)
{
    local string s;
    SPrintf(s, "Start: %.2f, Value: %s", fe.frame, fe.script.text);
    return s;
}

typedef struct
{
    int count;

    if (count > 0)
    {
        FrameEvent events[count]<optimize=false>;
    }
} FrameEvents;

typedef enum
{
    kPlayNoDefault = 0,
    kPlayNow = 1,
    kPlayNoBlend = 2,
    kPlayFirst = 3,
    kPlayLast = 4,
    kPlayDirty = 8
} PLAY_BLEND_FLAGS;

typedef enum
{
    // kPlayNoDefault = 0,
    kPlayNoLoop = 16,
    kPlayLoop = 32,
    kPlayGraphLoop = 48,
    kPlayNodeLoop = 64,
} PLAY_LOOP_FLAGS;

typedef enum
{
    kPlayBeatTime = 0,
    kPlayRealTime = 512,
    kPlayBeatAlign1 = 4096,
    kPlayBeatAlign2 = 8192,
    kPlayBeatAlign4 = 16384,
    kPlayBeatAlign8 = 32768
} PLAY_TIME_FLAGS;

typedef struct (SystemInfo& info, Bool super)
{
    int version; // 5 (GH2), 12 (TBRB)
    read_metadata(info, super);

    float start_beat;
    float end_beat;

    float beats_per_sec;
    
    // PLAY_BLEND_FLAGS | PLAY_LOOP_FLAGS | PLAY_TIME_FLAGS
    uint flags;
    uint play_flags;

    float blend_width;

    if (version > 3)
    {
        float range;
    }

    if (version == 5)
    {
        Bool unknown_bool_1;
    }
    else if (version > 5)
    {
        NumString relative; // 0x2c Not sure
    }

    if ((version - 9) < 2)
    {
        Bool unknown_bool_2;
    }

    if (version > 9)
    {
        int usually_neg_1; // 0x48 -1, 2
    }

    if (version > 11)
    {
        Bool do_not_decompress;
    }

    // ClearAllNode()

    if (version < 8)
    {
        uint node_count;
        if (node_count > 0)
        {
            ClipNode nodes[node_count]<optimize=false>;
        }
    }
    else
    {
        uint nodes_size; // Computed
        uint node_count;

        if (node_count > 0)
        {
            ClipNode nodes[node_count]<optimize=false>;
        }
    }

    // ResizeNode()
    
    if (version < 3)
    {
        int some_string_count;
        NumString some_strings[some_string_count]<optimize=false>;
    }

    if (version < 7)
    {
        NumString enter_event;
        NumString exit_event;
        
        // Print same warnings as milo engine code
        if (enter_event.count > 0) Printf("WARN: Has old enter event %s, must port\n", enter_event.text);
        if (exit_event.count > 0) Printf("WARN: Has old exit event %s, must port\n", exit_event.text);

        FrameEvents events;
    }
    else
    {
        FrameEvents events;
    }
    
    
    /*ClipEvents clip_events;

    byte bytes_always_0[8];
    FrameEvents events;*/
} CharClip;

#ifdef STANDALONE_FILE

if (STANDALONE_FILE == "CharClip")
{
    local int obj_version = guess_version();
    local SystemInfo info;
    info.version = 25;

    if (IsBigEndian())
    {
        info.platform = X360;
    }
    else
    {
        info.platform = PS2;
    }

    CharClip char_clip(info, False);
}

#endif

#endif