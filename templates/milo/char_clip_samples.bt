// This is the simple but inefficient format that just stores samples and interpolates. Data is grouped by time, not channel, for better storage, interpolation, etc.
// Super: CharClip
// Ext: (None)
// C++ Class: CharClipSamples

#ifndef IN_MILO_FILE
    #ifndef STANDALONE_FILE
        #define STANDALONE_FILE "CharClipSamples"
    #endif
#endif

#ifndef OBJECT_CHAR_CLIP_SAMPLES
#define OBJECT_CHAR_CLIP_SAMPLES

#include "common.bt"
#include "char_clip.bt"

typedef struct
{
    int count;

    if (count > 0)
    {
        NumString trans_names[count]<optimize=false>;
    }
} TransInfo;

typedef struct
{
    NumString symbol;
    float weight;
} CharBone4Bone;

// TODO: Maybe move to separate file
typedef struct (SystemInfo& info, Bool super)
{
    int version; // 16 (TBRB)

    int bone_count;
    CharBone4Bone bones[bone_count]<optimize=false>;

    uint some_sizes[7];
    uint compression_enum; // 2
    uint num_samples;

    float frames[num_samples];

} CharBonesSamples;

typedef struct (SystemInfo& info, Bool super)
{
    int version; // 15 (TBRB), 16 (GDRB)
    CharClip char_clip(info, False);

    CharBonesSamples full(info, False);
    CharBonesSamples one(info, False);

    //TransInfo trans_info;
} CharClipSamples;

#ifdef STANDALONE_FILE

if (STANDALONE_FILE == "CharClipSamples")
{
    local int obj_version = guess_version();
    local SystemInfo info;
    info.version = 25;

    if (IsBigEndian())
    {
        info.platform = X360;
    }
    else
    {
        info.platform = PS2;
        info.version = 24;
    }

    CharClipSamples char_clip_samples(info, False);
}

#endif

#endif