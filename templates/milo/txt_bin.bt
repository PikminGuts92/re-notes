// Reference: https://github.com/mtolly/onyxite-customs/blob/master/haskell/packages/onyx-lib/src/Onyx/Amplitude/PS2/TxtBin.hs

LittleEndian();

#include "common.bt"

const uint MAX_NODE_DISPLAY_COUNT = 4;
const uint MAX_NODE_DISPLAY_STR_LENGTH = 200;

struct AmpNode;

typedef struct
{
    ushort child_count;
    uint id_1; // Line #
    uint id_2; // Source index

    // Types are packed in 2-bits, so 16 types per 32-bit word
    local uint type_count = child_count / 16;
    if ((child_count % 16) > 0) type_count += 1;

    local uint type_idx = 0;
    uint types[type_count];

    local string value_text;

    if (child_count > 0)
    {
        AmpNode children[child_count]<optimize=false>;

        local string child_values = "";
        local uint i = 0;

        while (i < child_count) // && i < MAX_NODE_DISPLAY_COUNT)
        {
            if (i > 0)
            {
                child_values += " ";
            }

            if ((Strlen(child_values) + Strlen(children[i].value_text)) > MAX_NODE_DISPLAY_STR_LENGTH)
            {
                child_values += "...";
                break;
            }
            

            child_values += children[i].value_text;
            i += 1;
        }

        SPrintf(value_text, "(%s)", child_values);

        /*if (children[0].type == 3 && exists(children[0].value.text))
        {
            SPrintf(value_text, "(%s ...) ; %d children", child_count);
        }
        else
        {
            SPrintf(value_text, "(...) ; %d children", child_count);
        }*/
    }
    else
    {
        value_text = "()";
    }
} AmpParentNode<read=Str("%s", this.value_text)>;

typedef struct
{
    // Interpret type
    local uint div = parentof(this).type_idx / 16;
    local uint rem = parentof(this).type_idx % 16;
    local uint type = (parentof(this).types[div] >> (rem * 2)) & 0x03;

    parentof(this).type_idx += 1;

    local string value_text = "";
    
    switch(type)
    {
        // Integer
        case 0x00:
            int value;
            SPrintf(value_text, "%d", value);
            break;
        // String
        case 0x01:
            NumString value;
            if (exists(value.text))
            {
                // Wrap in quotes if space found
                if (Strchr(value.text, ' ') >= 0 || Strchr(value.text, '\t') >= 0)
                {
                    SPrintf(value_text, "\"%s\"", value.text);
                }
                else
                {
                    SPrintf(value_text, "%s", value.text);
                }
            }
            else
            {
                value_text = "\"\""; // Use when empty string
            }
            break;
        // Float
        case 0x02:
            float value;
            SPrintf(value_text, "%f", value);
            break;
        // Node
        case 0x03:
            AmpParentNode value;
            SPrintf(value_text, "%s", value.value_text);
            break;
    }
} AmpNode<read=Str("%s", this.value_text)>;

struct TxtBin
{
    ubyte version; // Always 2

    // Import sources
    struct Imports
    {
        uint import_count; // Seems always to reference itself too
        if (import_count > 0) NumString imports[import_count]<optimize=false>;
    } imports<read=Str("%d imports", this.import_count)>;

    // Data
    AmpParentNode data;
} file;