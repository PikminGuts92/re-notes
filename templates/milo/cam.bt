// A Camera object is drawable and transformable. When drawn
// it sets up projection and clipping parameters for
// subsequent draw siblings.
// Super: Trans
// Ext: .cam
// C++ Class: RndCam

#ifndef IN_MILO_FILE
    #ifndef STANDALONE_FILE
        #define STANDALONE_FILE "Cam"
    #endif
#endif

#ifndef OBJECT_GROUP
#define OBJECT_GROUP

#include "common.bt"
#include "draw.bt"
#include "trans.bt"

typedef struct (SystemInfo& info, Bool super)
{
    int version; // 9 (GH1), 12 (GH2/TBRB)

    if (version > 10) read_metadata(info, super);

    Trans trans(info, True);

    if (version < 10) Draw draw(info, True);

    // The distance in world coordinates to the far clipping
    // plane. The near/far ratio is limited to 1:1000 to preserve
    // Z-buffer resolution. Note that on the PS2, object polys are
    // culled rather than clipped to the far plane.
    float near_plane;
    float far_plane;
    float y_fov;

    // if (version < 12) RndCam::ConvertFov(y_fov)

    // The area of the screen in normalized coordinates
    // (0 to 1) to draw into.
    Rect screen_rect;

    // The part of the Z-buffer to use, in normalized
    // coordinates. It can be useful to draw a scene where the near
    // and far planes must exceed the 1:1000 ratio (so multiple
    // cameras are used to draw farthest to nearest objects, each
    // using a closer range of the z-buffer) or to leave some
    // z-buffer for HUD overlay objects.
    Vector2 z_range;

    NumString target_tex; // RndTex (not sure of exact field name)
} Cam;


#ifdef STANDALONE_FILE

if (STANDALONE_FILE == "Cam")
{
    local int obj_version = guess_version();
    local SystemInfo info;
    info.version = 25;

    if (IsBigEndian())
    {
        info.platform = X360;
    }
    else
    {
        info.platform = PS2;
        info.version = 24;
    }

    Cam cam(info, False);
}

#endif

#endif