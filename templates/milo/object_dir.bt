// An ObjectDir keeps track of a set of Objects. It can subdir or proxy in other ObjectDirs.
// Super: (None)
// Ext: (None)
// C++ Class: ObjectDir

#ifndef IN_MILO_FILE
    #ifndef STANDALONE_FILE
        #define STANDALONE_FILE "ObjectDir"
    #endif
#endif

#ifndef OBJECT_DIR
#define OBJECT_DIR

#include "common.bt"
//#include "milo_file.bt"

typedef enum <byte>
{
    Import = 0x01,
    SubDir = 0x03
} MiloReferenceType;

typedef struct (SystemInfo& info, Bool super)
{
    int version; // 16 (GH2), 17 (GH2 360), 22 (TBRB), 27 (DC1)

    if (version < 22)
    {
        if (version >= 2 && version < 17)
        {
            // Object::Load
            read_metadata(info, super);
        }
    }
    else
    {
        // Object::LoadType
        int revision; // Usually 1 or 2
        NumString type;
    }

    if (version > 1)
    {
        int viewport_count; // Usually 7
        local int i;
        for (i = 0; i < viewport_count; i++)
        {
            Matrix viewports;

            // Old games have extra padding
            if (version <= 17)
            {
                FSkip(4);
            }
        }
        int curr_viewport_index; // 0, 6, 7
    }

    if (version > 12)
    {
        if (version > 19)
        {
            // When true, sub directories?
            Bool inline_proxy;
        }

        NumString proxy_file; // Used for sub dir as regular entry
    }

    if (version >= 2 && version < 11)
    {
        NumString some_object_1;
    }

    if (version >= 4 && version < 11)
    {
        NumString some_object_2;

        // If some_object_2 is empty and curr_viewport_index is 7
        //   then set curr_viewport_index to 0
    }

    if (version == 5)
    {
        NumString ignore_string;
    }

    if (version > 2)
    {
        int sub_dir_count;
        if (sub_dir_count > 0) NumString sub_dirs[sub_dir_count]<optimize=false>;

        if (version >= 21)
        {
            Bool inline_subdir; // Seems to be true when sub directory
            int inline_subdir_count;

            if (inline_subdir_count > 0)
            {
                NumString inline_subdirs[inline_subdir_count]<optimize=false>; // Appears in reverse order?


                if (version >= 27)
                {
                    // In new version, sub directories + imports are combined
                    // This array defines reference types
                    // 1 = Import, 3 = Sub dir
                    MiloReferenceType reference_types[inline_subdir_count];

                    // Usually zero'd
                    byte reference_types_alt[inline_subdir_count];
                }

                // Iterate over inline sub directories
                for (i = 0; i < inline_subdir_count; i++)
                {
                    //MiloFile sub_dirs(info);
                }
            }
        }
    }

    // Another version check here but decompiled subroutine unclear...

    if (version < 19)
    {
        if (version < 16)
        {
            if (version > 14)
            {
                NumString ignore_string_2;
            }
        }
        else
        {
            NumString ignore_string_3;
        }
    }

    // Load proxy + inlined here? idk...

    if (version > 20)
    {
        // Load inlined files?
    }

    // Seems that TBRB milos are always inlined
    //if (FEof() || (exists(this.inline_proxy) && this.inline_proxy == True)) return;

    // --- ObjectDir::PostLoad ---

    if (version > 10)
    {
        // Objects
        NumString some_string_1;
        NumString song_string_2;
    }

    if (version < 22)
    {
        if (version > 16)
        {
            // Object::Load
            read_metadata(info, super);
        }
    }
    else
    {
        // Object::LoadRest
        DTB props; // Usually empty
        if (info.version >= 25)
        {
            NumString note;
        }
    }
} ObjectDir;

#ifdef STANDALONE_FILE

if (STANDALONE_FILE == "ObjectDir")
{
    local int obj_version = guess_version();
    local SystemInfo info;
    info.version = 25;

    if (IsBigEndian())
    {
        info.platform = X360;
    }
    else
    {
        info.platform = PS2;
        if (obj_version == 16)
        {
            info.version = 24;
        }
    }

    ObjectDir object_dir(info, False);
}

#endif


#endif