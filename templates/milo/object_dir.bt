// An ObjectDir keeps track of a set of Objects.
// Super: (None)
// Ext: (None)

#ifndef OBJECT_DIR
#define OBJECT_DIR

#include "common.bt"

typedef enum <byte>
{
    Import = 0x01,
    SubDir = 0x03
} MiloReferenceType;

typedef struct (SystemInfo& info, Bool super)
{
    int version; // 17 (GH2), 22 (TBRB), 27 (DC1)

    if (version >= 22)
    {
        int revision; // Usually 1 or 2
        NumString type;
    }

    if (version >= 27)
    {
        // Zero'd data
        FSkip(8);
    }

    int viewport_count; // Usually 7
    local int i;
    for (i = 0; i < viewport_count; i++)
    {
        Matrix viewports;

        // Old games have extra padding
        if (version <= 17)
        {
            FSkip(4);
        }
    }

    int usually0; // 0, 6, 7
    Bool always_true; // When true, sub directories?
    NumString sub_path; // Used for sub dir as regular entry

    int imported_milo_count;
    if (imported_milo_count > 0)
    {
        NumString imported_milos[imported_milo_count]<optimize=false>;
    }

    Bool always_false; // Seems to be true when sub directory

    int sub_dir_count;
    if (sub_dir_count > 0)
    {
        NumString sub_dir_names[sub_dir_count]<optimize=false>; // Appears in reverse order?

        if (version >= 27)
        {
            // In new version, sub directories + imports are combined
            // This array defines reference types
            // 1 = Import, 3 = Sub dir
            MiloReferenceType reference_types[sub_dir_count];

            // Usually zero'd
            byte reference_types_alt[sub_dir_count];
        }

        // Iterate over sub directories
        for (i = 0; i < sub_dir_count; i++)
        {
            MiloFile sub_dirs(info);
        }
    }

    if (version <= 22)
    {
        byte unk_count;
        if (unk_count > 0)
        {
            byte unk_bytes<format=hex>;
        }

        if (ReadInt() == info.version)
        {
            // Ends abruptly if milo object entry
            MiloFile sub_dirs(info);
            byte unk_0;
        }

        byte zeros[3]<format=hex>;
    }
    else
    {
        // Not sure
        NumString empty_or_name_again;
    }

    NumString empty_or_cam;

    DTB props; // Usually empty
    if (info.version >= 25)
    {
        NumString note;
    }
} ObjectDir;

#endif