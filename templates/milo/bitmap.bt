// Super: (None)
// Ext: .png .bmp
// C++ Class: RndBitmap?

#ifndef IN_MILO_FILE
    #ifndef STANDALONE_FILE
        #define STANDALONE_FILE "Bitmap"
    #endif
#endif

#ifndef OBJECT_BITMAP
#define OBJECT_BITMAP

#include "common.bt"

typedef enum <uint>
{
    RGBA = 3,
    DXT1_BC1 = 8,
    DXT5_BC3 = 24,
    ATI2_BC5 = 32,
    TPL_CMP = 72,
    TPL_CMP_ALPHA = 328
} BITMAP_ENCODING;

typedef struct (ubyte mip, ushort w, ushort h, uint size)
{
    local ubyte mip_level = mip;
    local ushort width = w;
    local ushort height = h;

    byte data[size];
} Texture<read=Str("mip #%d: %dx%d", this.mip_level, this.width, this.height)>;

typedef struct (ubyte mip, ushort w, ushort h, uint size)
{
    local ubyte mip_level = mip;
    local ushort width = w;
    local ushort height = h;

    ubyte data[size];

    // Validation...
    local uint i;
    local uint pixel_count = 0;

    for (i = 0; i < size; i += 2)
    {
        pixel_count += data[i];
    }
} FreqTexture<read=Str("mip #%d: %dx%d (%d pixels)", this.mip_level, this.width, this.height, this.pixel_count)>;

typedef struct
{
    // 0 = Amp, 1 = GH/RB
    // Header is 16 bytes in amp, and 32 bytes for GH/RB
    byte version; // Usually 1 (might change in LEGO idk)

    local ubyte is_freq = 0;

    if (version == 0
        && (ReadUShort(FTell() + 3) == 0xD000 || ReadUShort(FTell() + 3) == 0x1500))
    {
        // 24-byte header (No mip maps)
        FSkip(3); // Zero'd data
        ushort encoding; // 0xD000 = 4bpp, 0x1500 = 8bpp (variable)

        ushort width;
        ushort height;
        ushort bpl;

        uint always_0_1;
        uint img_data_size;
        uint always_0_2;

        local ubyte bpp = 4;
        local ubyte mip_maps = 0;
        is_freq = 1;

        if (encoding == 0x1500) bpp = 8;
    }
    else if (version == 0)
    {
        // 16-byte header (No mip maps)
        ubyte bpp;
        ushort encoding; // Always 3

        ushort width;
        ushort height;
        ushort bpl;

        local ubyte mip_maps = 0;
    
        // Skip empty bytes
        FSkip(6);
    }
    else
    {
        // 32-byte header
        ubyte bpp;
        BITMAP_ENCODING encoding;
        ubyte mip_maps;

        ushort width;
        ushort height;
        ushort bpl;

        // Skip empty bytes
        FSkip(19);
    }

    if (encoding == 3 && (bpp == 4 || bpp == 8))
    {
        byte color_palette[1 << (bpp + 2)];
    }
    else if (is_freq)
    {
        // Always has 256 colors
        byte color_palette[1024];

        uint always_0;
        uint color_count; // Count of actual colors in palette

        if (encoding == 0x1500)
        {
            FreqTexture textures(0, width, height, img_data_size);
            return;
        }
    }

    local ubyte i = 0;
    local ushort w = width;
    local ushort h = height;

    local uint data_size;
    while (i <= mip_maps)
    {
        data_size = ((uint)w * (uint)h * (uint)bpp) / 8;
        Texture textures(i, w, h, data_size);

        w >>= 1;
        h >>= 1;
        i++;
    }
} Bitmap;

#ifdef STANDALONE_FILE

if (STANDALONE_FILE == "Bitmap")
{
    Bitmap bitmap;
}

#endif

#endif