#ifndef BANDFUSE_COMMON
#define BANDFUSE_COMMON

#include "constants.bt"

#link "bf_editor_lib.dll"
    void init_string_tables();
    void add_string_to_table(uint64 table_id, uint64 string_hash, string string_value);
    string get_string_from_table(uint64 table_id, uint64 string_hash);
    string get_string_from_any_table(uint64 string_hash);
    int string_table_exists(uint64 table_id);
#endlink

typedef struct
{
    local uint pos = FTell();
    uint value;

    local uint abs_pos = pos + value;
} Offset<read=Str("%d", this.abs_pos)>;

typedef struct
{
    uint64 value<format=hex>;
    
    local string str_value = value == 0 ? "" : Str("%016LX", value);
    local uint64 str_table_key = CURRENT_STRING_TABLE_KEY;

    update_hkey(this);
} HKey<read=this.str_value, optimize=false>;

void update_hkey(HKey& key)
{
    if (CURRENT_STRING_TABLE_KEY == 0) return;
    
    local string result = get_string_from_table(key.str_table_key, key.value);
    if (result != "")
    {
        key.str_value = result;
    }
}

typedef struct
{    
    uint64 value;
} HKey_Empty<read=Str("%016LX", this.value)>;

typedef struct
{
    char magic[4];
    uint size;

    local string formatted_magic;
    switch (magic)
    {
        case MAGIC_INDX:
            formatted_magic = "INDX";
            break;
        case MAGIC_RIFF:
            formatted_magic = "RIFF";
            break;
        case MAGIC_STBL:
            formatted_magic = "STbl";
            break;
        case MAGIC_ZOBJ:
            formatted_magic = "ZOBJ";
            break;
        default:
            formatted_magic = "UNKN";
            break;
    }
} ChunkInfo<read=Str("%s (Size: %d)", this.formatted_magic, this.size)>;

// 1 byte
typedef struct
{
    byte v;

    local string note;
    local int octave = (v / 12) - 1;
    
    switch (v % 12)
    {
        case 0:
            note = "C";
            break;
        case 1:
            note = "Db";
            break;
        case 2:
            note = "D";
            break;
        case 3:
            note = "Eb";
            break;
        case 4:
            note = "E";
            break;
        case 5:
            note = "F";
            break;
        case 6:
            note = "Gb";
            break;
        case 7:
            note = "G";
            break;
        case 8:
            note = "Ab";
            break;
        case 9:
            note = "A";
            break;
        case 10:
            note = "Bb";
            break;
        case 11:
            note = "B";
            break;
    }
} Pitch<read=read_pitch>;

string read_pitch(Pitch& pitch)
{
    return Str("%s%d", pitch.note, pitch.octave);
}

// 40 bytes
typedef struct
{
    typedef struct
    {
        Pitch a;
        Pitch b;
        Pitch c; // Actual?
        Pitch d; // Alt
    } String<read=Str("%s | %s | %s | %s", read_pitch(this.a), read_pitch(this.b), read_pitch(this.c), read_pitch(this.d))>;

    HKey tuning_name;

    String string_1;
    String string_2;
    String string_3;
    String string_4;
    String string_5;
    String string_6;
    String string_7;
    String string_8;
} InstrumentTuning;

typedef struct
{
    HKey file_path;
    HKey dir_path;
    HKey file_type;

    uint64 always_0<hidden=true>;
} ZObjectHeader;

#endif