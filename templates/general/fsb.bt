#include "mp3.bt"

LittleEndian();

const uint SAMPLES_PER_FRAME = 1152;

typedef enum <ushort>
{
    MP3 = 0,
    XMA = 1
} FMOD_ENCODING;

typedef struct
{
    ushort file_entry_size;
    char file_name[30];
    uint sample_count;
    uint compressed_size;

    uint loop_start;
    uint loop_end;

    // 544, 0
    // 576, 0
    // 512, 0
    ushort some_value_1; // Sample count in last frame?
    ubyte some_value_2; // Related to alignment... 0 is none (or 2 bytes?) and 4 = 128 byte alignment
    ubyte some_value_3; // 0, 4

    uint sample_rate; // 44100
    ushort volume;    // 255
    ushort pan;       // 128
    ushort priority;  // 128

    ushort channels;
    float min_distance; // 1
    float max_distance; // 10000

    uint variable_frequency; // 80
    ushort variable_volume;  //  0
    ushort variable_pan;     //  0

    if (file_entry_size == 96)
    {
        uint unknown_1;
        uint unknown_2;
        uint unknown_3;
        uint unknown_4;
    }
    else if (file_entry_size > 80)
    {
        local uint remaining_size = file_entry_size - 80;
        byte unknown_data[remaining_size];
    }

    local uint frame_count_per_channel = (sample_count / SAMPLES_PER_FRAME) / 2;
    local uint frame_count = channels * frame_count_per_channel + ((channels % 2) * frame_count_per_channel);
} FSBFileEntry<read=Str("%s (%d bytes)", this.file_name, this.compressed_size)>;

typedef struct (FSBFileEntry& entry, FMOD_ENCODING& encoding)
{
    local string file_name = entry.file_name;
    local uint file_size = entry.compressed_size;
    
    switch (encoding)
    {
        case 0:
            MP3File data(file_size);
            break;
        default:
            Printf("Warning: Unknown encoding of %d\n", encoding);
            byte data[file_size];
            break;
    }
} FSBStream<read=Str("%s (%d bytes)", this.file_name, this.file_size)>;

typedef struct
{
    char magic[4]; // "FSB3" or "FSB4"

    uint file_count;
    uint directory_size; // Matches file entry size? Could also be data fit size for padding
    uint data_size;

    FMOD_ENCODING encoding; // Ususally 0
    ushort fsb_version; // Always matches magic?

    /*
        32 = Extended? Not the case for PG. Maybe for encoding?
    */
    uint flags<format=hex>;

    if (fsb_version == 4)
    {
        // Both ususally 0
        uint hash_a<format=hex>;
        uint hash_b<format=hex>;

        ubyte hash[16];
    }

    if (file_count > 0) FSBFileEntry file_entries[file_count]<optimize=false>;
    if (data_size == 0) return;

    BigEndian();

    local uint i;
    for (i = 0; i < file_count; i++)
    {
        FSBStream streams(file_entries[i], encoding);
    }
} FSBFile<read=Str("(%d entries)", this.file_count)>;

FSBFile fsb_file;
