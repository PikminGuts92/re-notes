LittleEndian();

/*
FF 50 FF FF - Parent element
 string - name
   uint - id
   uint - child count

FF 56 FF FF - Value element
 string - name
 ushort - type index
 string - type
     ?? - value

FF 41 FF FF - Array element
 string - name
 ushort - type index
 string - type (elementType)
  ubyte - value length (numElements)
  ???[] - value
FF 70 01 00 - End of node?

Note: If type index != 0xFF_FF then next bytes will either be 0xFF_FF or 0x00_00_00_00

id = 4 bytes

type

FF 56 FF FF - GeometryType -> type, value

FF 41 FF FF - Matrix -> elementType, numElements, values

String - 6 bytes
 2 bytes - index
 4 bytes - string length

 If first 2 bytes != 0xFF_FF, interpret as index to previously defined string
   Then next 4 bytes should be 0
*/

typedef struct
{
    local string value = "";
} DefinedString<read=Str("%s", this.value)>;

typedef struct
{
    local string name = "";
    local string type = "";
    local int is_parent = 0;
} NameTypeString<read=Str("%s | %s", this.name, this.type)>;

local int Z_STRING_INDEX = 0;
local DefinedString STRINGS[2000];

local int NAME_TYPE_INDEX = 1;
local NameTypeString NAME_TYPES[256];

void update_name_types(string name, string type, int is_parent)
{
    if (NAME_TYPE_INDEX >= 256) return;

    NAME_TYPES[NAME_TYPE_INDEX].name = name;
    NAME_TYPES[NAME_TYPE_INDEX].type = type;
    NAME_TYPES[NAME_TYPE_INDEX].is_parent = is_parent;

    NAME_TYPE_INDEX++;
}

typedef struct
{
    int size;
    local int index = -1;

    if (size > 0)
    {
        char value[size];
        index = Z_STRING_INDEX++;

        STRINGS[index].value = value;
    }
    else
    {
        local string value = "(n/a)";
    }
} ZString<read=this.value>;

typedef struct
{
    ushort index;
    if (index != 0xFFFF)
    {
        // Fetch value from previously defined strings
        local string value = STRINGS[index].value;
    }
    else
    {
        ZString value;
    }
} IndexedString<read=get_string>;

string get_string(IndexedString& str)
{
    if (str.index != 0xFFFF)
    {
        return str.value;
    }
    else
    {
        return str.value.value;
    }
}

string get_zstring(ZString& str)
{
    return str.value;
}

struct XElement;

typedef struct
{
    // Last two digits are node type index (allocated string)
    //
    // FF 70 01 00
    // FF 70 1A 00
    // FF 70 13 00
    // FF 70 14 00
    // FF 70 00 00

    char ff_70[2];
    IndexedString closing;
} Terminate<read=Str("/%s", get_string(this.closing))>;

// 0x41
typedef struct
{
    ZString name;

    // Attributes
    IndexedString element_type;
    ubyte num_elements;

    update_name_types(get_zstring(name), get_string(element_type), false);

    // Value
    if (num_elements == 0) return;
    float elements[num_elements];
} ArrayElement;

// 0x50
typedef struct (int packed, string parent_name)
{
    local int is_packed = packed;

    if (!packed)
    {
        ZString name;
        update_name_types(get_zstring(name), "", true);
    }
    else
    {
        local string name = parent_name;
    }

    // Attributes
    uint id;

    // Child elements
    uint child_count;
    if (child_count > 0)
    {
        /*local int i;
        for (i = 0; i < child_count; i++)
        {
            XElement children;
        }*/

        XElement children[child_count]<optimize=false>;
    }

    if (packed)
    {
        ubyte unknown;
        return;
    }

    Terminate terminator;
} ParentElement<read=read_parent>;

string get_parent_name(ParentElement& element)
{
    if (element.is_packed) return element.name;
    else return get_zstring(element.name);
}

string read_parent(ParentElement& element)
{
    return Str("%s (id: %d, children: %d)", get_parent_name(element), element.id, element.child_count);
}

// 0x43
typedef struct
{
    // Child elements
    uint child_count;
    if (child_count == 0) return;

    XElement children[child_count]<optimize=false>;
} UnnamedCollection;

void read_value(string type)
{
    switch (type)
    {
        case "cDeltaString":
            IndexedString value;
            break;
        case "Material":
            float value;
            break;
        case "Flat":
            IndexedString value;
            break;
        case "sFloat32":
            float value;
            break;
        case "sInt32":
            int value;
            break;
        case "SkFlat":
            IndexedString value;
            break;
        case "sUInt32":
            uint value;
            break;
        default:
            Printf("WARNING: \"%s\" type unknown\n", type);
            break;
    }
}

// 0x52
typedef struct
{
    ZString name;

    // Value
    read_value("sUInt32");
} EnumElement<read=Str("%s: %d", get_zstring(this.name), this.value)>;

// 0x56
typedef struct
{
    ZString name;

    // Attribute
    IndexedString type;
    update_name_types(get_zstring(name), get_string(type), false);

    /*
      types:
        cDeltaString (5)
        sFloat32 (8)
        sUInt32 (14)
        sInt32
    */

    // Value
    read_value(get_string(type));
} ValueElement;

typedef struct
{
    local ubyte init = ReadUByte();

    if (init != 0xFF)
    {
        ubyte some_num;
        IndexedString some_string;
    }

    ubyte id1;

    /*if (id1 != 0xFF)
    {
        // Treat id1 as index to previously defined name/types
        local string name = NAME_TYPES[id1].name;
        local string type = NAME_TYPES[id1].type;
        local int is_parent = NAME_TYPES[id1].is_parent;

        //ubyte id2;
        //ubyte id3;

        //  7 Name
        // 15 Name
        // 16

        // 07 FF FF
        if (is_parent) ParentElement node(true, name);
        else read_value(type);

        return;
    }*/

    ubyte id2;
    /*if (id2 == 0xFF)
    {
        // Not sure?
        IndexedString value;
        return;
    }*/

    ubyte id3;
    if (id3 == 0xFF) ubyte id4;

    // FF ?? FF FF
    // Only three elements for 0x43
    switch (id2)
    {
        case 0x41:
            ArrayElement node;
            break;
        case 0x43:
            UnnamedCollection node;
            return;
        case 0x50:
            ParentElement node(false, "");
            break;
        case 0x52:
            EnumElement node;
            break;
        case 0x56:
            ValueElement node;
            break;
        default:
            Printf("WARNING: 0x%02x id unknown\n", id2);
            break;
    }

    if (init != 0xFF)
    {
        // Matches some_string
        Terminate terminator;
    }
} XElement;

typedef struct
{
    char magic[4]; // SERZ
    ushort always_0;
    ushort always_1;

    XElement root;
} SERZFile;

SERZFile serz_file;