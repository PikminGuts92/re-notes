#include "milo_common.bt"

LittleEndian();

typedef struct
{
    int count;

    if (count > 0)
    {
        NumString transNames[count]<optimize=false>;
    }

    int countPerSample;
    int always1;
} SampleSetHeader;

typedef struct (NumString& transName)
{
    local string name = transName.text;

    if (Strstr(name, ".pos") >= 0)
    {
        // 12 bytes
        Vector3 pos;
    }
    else if (Strstr(name, ".quat") >= 0)
    {
        // 8 bytes
        float quat[2];
    }
    else if (Strstr(name, ".rotz") >= 0)
    {
        // 2 bytes
        byte rotz[2];
    }
} TransEntry;


typedef struct (SampleSetHeader& header)
{
    local int i;

    for (i = 0; i < header.count; i++)
    {
        TransEntry transEntries(header.transNames[i]);
    }
} TransEntriesFrame;

typedef struct (SampleSetHeader& header)
{
    local int i;
    
    // Iterate over indicies (frames?)
    for (i = 0; i < header.countPerSample; i++)
    {
        TransEntriesFrame transFrame(header);
    }
} SampleSetData;

typedef struct
{
    int version; // Always 5
    
    SampleSetHeader sampleHeader1;
    SampleSetHeader sampleHeader2;

    if (sampleHeader1.count > 0)
    {
        SampleSetData sampleSetData1(sampleHeader1);
    }

    if (sampleHeader2.count > 0)
    {
        SampleSetData sampleSetData2(sampleHeader2);
    }
} AnimClip;

struct AnimClipSamples
{
    NumString animType; // AnimClipSamples
    NumString animName;
    int version; // Always 18

    float f1;
    float f2;
    float f3;
    float f4;

    int unknown;
    float max1; // range = 0.0-1.0?

    AnimClip animClip;
} file;

// pos = 16 bytes, quat = 8 bytes, rotz = 2 bytes

// acs - Pre-caches animations
// acg - Has entries for acp files?
// acp - Lists transforms for channels (bones)?