LittleEndian();

// Probably used more like a bitfield but there's so few permutations used
typedef enum <byte>
{
    DPAD_DOWN,
    FACE_DOWN,
    DPAD_LEFT,
    FACE_RIGHT,
    DPAD_UP,
    FACE_UP,
    ANALOG = 8
} NoteType;

typedef enum <int>
{
    EASY,
    NORMAL,
    HARD,
    ALL_NIGHT
} Difficulty;

typedef struct
{
    ubyte beat;
    ubyte beat_frac;    

    ushort measure;

    NoteType note;
    byte length;

    byte unk1;
    byte unk2;
} NoteEvent<read=read_note_ev>;

string read_note_ev(NoteEvent& ev)
{
    local float frac = ev.beat_frac / ((float)255);

    local string s;
    SPrintf(s, "%d.%d.%.2d | %s | %d %d %d", ev.measure + 1, ev.beat + 1, (int)(frac * 100.0), EnumToString(ev.note), ev.length, ev.unk1, ev.unk2);    
    return s;
}

typedef struct
{
    char magic[4]; // MNS + \0

    int always0;
    int always1;

    int song_id;
    
    short always0;
    uint unk;
    
    Difficulty diff;
    short always0;

    uint note_count;
    int always0;

    NoteEvent notes[note_count];
    
    // Likely artifact from export
    if (!FEof())
    {
        local int extra_count = (FileSize() - FTell()) / 8;
        NoteEvent extra_notes[extra_count];
    }
} MNS;

MNS mns;