#include "milo_common.bt"
#include "gh1_common.bt"

LittleEndian();
// A Camera object is drawable and transformable. When drawn
// it sets up projection and clipping parameters for
// subsequent draw siblings.
// Super: Trans
// Ext: .cam

struct Cam
{
    int version; // Always 9
    Trans trans;
    
    /*
    int always1;
    byte always1;

    int always0;
    int always0;
    int always0;
    
    Matrix mat;*/
    
    Draw draw;
    //float floats[10];
    
    // The distance in world coordinates to the far clipping
    // plane. The near/far ratio is limited to 1:1000 to preserve
    // Z-buffer resolution. Note that on the PS2, object polys are
    // culled rather than clipped to the far plane.
    float nearPlane;
    float farPlane;
    
    float fov;

    // The area of the screen in normalized coordinates
    // (0 to 1) to draw into.
    Rect screenRect;
    
    // The part of the Z-buffer to use, in normalized
    // coordinates. It can be useful to draw a scene where the near
    // and far planes must exceed the 1:1000 ratio (so multiple
    // cameras are used to draw farthest to nearest objects, each
    // using a closer range of the z-buffer) or to leave some
    // z-buffer for HUD overlay objects.
    Vector2 zRange;
    
    // An optional Texture to render into. This automatically
    // sets or unsets the 'render' flag on the Texture object (see
    // Tex editor).
    NumString targetTex; // Not observed
} file;