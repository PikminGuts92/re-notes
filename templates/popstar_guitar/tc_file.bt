LittleEndian();

typedef enum <ushort>
{
    Green,
    Red,
    Yellow,
    Blue,
    Orange
} Fret;

typedef enum <ushort>
{
    None,
    StarPower = 512,
} Special<read=read_special>;

string read_special(Special& spec)
{
    local string str = EnumToString(spec);

    if (str != "")
    {
        return Str("%s (%d)", str, spec);
    }
    else
    {
        return Str("Unknown (%d)", spec);
    }
}

// 12 bytes
typedef struct
{
    Special special;

    float pos;
    float length;

    Fret fret;
} Event<read=Str("pos: %.02f, len: %.02f (%s %s)", this.pos, this.length, read_special(this.special), EnumToString(this.fret))>;

typedef struct
{
    char magic[4]; // SMUS
    ushort collection_count;

    typedef struct
    {
        ushort unk_1; // 0, 3, 4, 5
        ushort unk_2; // 0, 1, 2, 3, 4

        ushort count;
        if (count > 0) Event events[count];

        ushort unk_3; // 0, 1, 2048
    } EventCollection<read=Str("%d events (%d %d %d)", this.count, this.unk_1, this.unk_2, this.unk_3)>;

    EventCollection collection[collection_count]<optimize=false>;
} SmusFile;

typedef struct
{
    local uint start = FTell();

    local uint min_string_offset = 0xFFFFFFFF;
    local uint min_events_offset = 0xFFFFFFFF;
    local uint max_string_offset = 0;
    local uint max_events_offset = 0;

    uint count;

    struct UnknownEntriesListing
    {
        // 24 bytes
        typedef struct
        {
            uint unk_1; // 0
            uint unk_2; // 0

            uint string_offset;
            uint events_count;
            uint events_offset;

            uint unk_3; // 0

            local string string_value = ReadString(start + string_offset);
            local uint abs_string_offset = start + string_offset;
            local uint abs_events_offset = start + events_offset;

            min_string_offset = Min(min_string_offset, start + string_offset);
            min_events_offset = Min(min_events_offset, start + events_offset);
            max_string_offset = Max(max_string_offset, start + string_offset + Strlen(string_value) + 1);
            max_events_offset = Max(max_events_offset, start + events_offset + (8 * events_count));
        } UnknownEntry<read=Str("%s", this.string_value)>;

        UnknownEntry entries[count]<optimize=false>;
    } unknown_entries;

    // 8 zero'd bytes here...

    FSeek(min_events_offset);
    struct FloatEntries
    {
        // 8 bytes
        typedef struct
        {
            float pos;
            float value;
        } PosValue<read=Str("pos: %.02f, value: %.02f", this.pos, this.value)>;

        typedef struct (UnknownEntry& entry)
        {
            local string string_value = entry.string_value;
            local uint events_count = entry.events_count;

            PosValue values[events_count];
        } PosValueCollection<read=Str("%s (%d events)", this.string_value, this.events_count)>;

        local uint i;

        for (i = 0; i < count; i++)
        {
            PosValueCollection entries(unknown_entries.entries[i]);
        }
    } float_entries;

    //byte data_1[max_events_offset - min_events_offset];

    FSeek(min_string_offset);
    byte string_blob[max_string_offset - min_string_offset];
} UnknownEntries<read=Str("%d entries", this.count)>;

typedef struct
{
    local uint start = FTell();

    char magic[4]; // SVIS

    ushort entry_count; // Matches count of unk_entries
    ushort string_blob_size;
    ushort unk_count;

    local uint start_strings = FTell() + (entry_count * 4);

    struct StringEntries
    {
        // 4 bytes
        typedef struct
        {
            ushort unk_1;
            ushort unk_2; // Always 0?

            local string string_value = ReadString(start_strings + unk_1);
        } UnknownEntrySvis<read=Str("%s (%d) %d", this.string_value, this.unk_1, this.unk_2)>;

        UnknownEntrySvis entries[entry_count]<optimize=false>;
    } string_entries<read=Str("%d entries", parentof(this).entry_count)>;

    // Note: Blob seems to contain extra string values
    FSeek(start_strings);
    byte string_blob[string_blob_size];

    //uint some_count;
    //byte data[unk_count * 16];

    /*struct Unknown
    {
        ushort unk_1;
        ushort unk_2;

        float unk_3;
        float unk_4;

        ushort unk_5;
        ushort unk_6;

        float unk_7;
        float unk_8;
    } unk_data[4];*/

    //return;

    struct UnknownEntries2
    {
        //uint entry_count;
        ushort entry_count;
        ushort idk_count;

        if (idk_count > 0) float idk[idk_count];

        struct Unknown
        {
            ushort unk_1;
            ushort count;

            if (count > 0) float values[count];
        } unk_data[entry_count]<optimize=false>;
    } unk_entries[1]<optimize=false>;
} SvisFile;

typedef struct
{
    struct Header
    {
        // E3 FF 9D B8 5E 22 51 0E 31 59 4A 35 19 5D 4D 1B
        // 3F 5E 09 09 4B 41 21 47 24 A2 E8 FF 50 A2 85 9F
        // FF A9 97 FE 91 96 FD 8D F7 AE EB A9 97 FB 91 B8
        // EB FB F7 A4 F4 84 FD FE AA F8 86 F8 A3 92 F9 E8
        // 89 BC F4 EA 60 5E 37 6B 6C 3D 35 49
        byte unknown_bytes[76]<format=hex>;
        uint unknown<format=hex>;
    } header;

    FSeek(2048);

    local string magic;

    while (!FEof())
    {
        // Read magic
        magic = ReadString(FTell(), 4);
    
        switch (magic)
        {
            case "SMUS":
                local uint start = FTell();

                // Some midi-like file?
                SmusFile file;

                local uint rem = FTell() % 2048;

                if (rem > 0) FSkip(2048 - rem);

                magic = ReadString(FTell(), 4);
                if (magic == "SVIS") break; // Hacky

                UnknownEntries unk_entries;
                break;
            case "SVIS":
                SvisFile svis_file;
                return;
            default:
                Printf("Unknown magic: \"%s\"", magic);
                return;
        }

        local uint rem2 = FTell() % 2048;
        if (rem2 > 0) FSkip(2048 - rem2);

        //break;
    }

    
} TcFile;

TcFile file;