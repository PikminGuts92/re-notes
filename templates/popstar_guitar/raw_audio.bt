LittleEndian();

// TODO: Make const
local uint SIZE_PER_CHUNK = 0x48000; //0x30000; // Guessing...

typedef struct
{
    short value;
} Sample<read=Str("%d", this.value), bgcolor=get_bgcolor_color>;

int get_bgcolor_color(Sample& s)
{
    local int r = (int)Min((Abs(s.value) / 32768.0) * 255.0, 255.0);

    // BGR order
    return r;
}

typedef struct (uint sample_size)
{
    local uint sample_count = sample_size / 2;

    short samples[sample_count];

    // Calculate average...
    /*local uint i;
    local double running_avg = 0.0;
    local double weight = 1.0 / (double)sample_count;

    while (i < sample_count)
    {
        running_avg += weight * (double)samples[i];
        i++;
    }*/

    return;

    local uint i = 0;
    for (i = 0; i < sample_count; i++)
    {
        Sample samples;
    }
} ChunkSamples;//<read=Str("Avg: %.02f", running_avg)>;

typedef struct (uint i, uint chunk_size)
{
    // Split evenly between tracks
    local uint sample_size = chunk_size / 3;

    ChunkSamples backing(sample_size * 2); // Interleaved stereo
    ChunkSamples guitar(sample_size);  // Mono

    local float start = (float)(i * (SIZE_PER_CHUNK / 4)) / 44100.0;
    local float length = (sample_size / 2) / 44100.0;
} Chunk<read=Str("start: %f, length: %f", this.start, this.length)>;

typedef struct
{
    local uint channels = 3;
    local uint sample_rate = 44100;

    uint size; // Samples?

    local uint sample_count = (FileSize() - FTell()) / 2;

    //Sample samples[sample_count];
    
    //Chunk chunks1(200000);
    //Chunk chunks2(200000);
    //Chunk chunks3(200000);
    //Chunk chunks4(200000);

    local uint i = 0;

    while ((FileSize() - FTell()) > 6) // (!FEof())
    {
        Chunk chunks(i, Min(FileSize() - FTell(), SIZE_PER_CHUNK));
        i += 1;

        //break;
    }
    

    local uint total_samples = sample_count / 2; // Split between two tracks
    local double seconds = (double)total_samples / (double)sample_rate;
    //Printf("Length: %.02f seconds", seconds);

    //short samples[sample_rate * 2];
    //short samples2[sample_rate];
} RawAudio<read=Str("length: %.02fs (%d samples)", this.seconds, this.total_samples)>;

RawAudio file;