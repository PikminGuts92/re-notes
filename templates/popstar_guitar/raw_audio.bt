LittleEndian();

const uint CHUNK_SIZE = 0x48000;
const uint CHUNK_SIZE_BACKING = 0x30000;
const uint CHUNK_SIZE_GUITAR = 0x18000;

const uint SAMPLE_RATE = 44100;
const uint CHANNELS = 3;

typedef struct (uint sample_size, uint sample_count)
{
    short samples[sample_count];

    local uint padding_size = sample_size - (sample_count * 2);
    if (padding_size > 0) byte padding[padding_size];
} ChunkSamples;

typedef struct (uint i, uint backing_size_current, uint guitar_size_current)
{
    if (i == 0)
    {
        // Interleaved stereo
        uint backing_size;
        ChunkSamples backing(CHUNK_SIZE_BACKING - 4, (Min(backing_size, CHUNK_SIZE_BACKING) - 4) / 2); // -1 sample
        
        // Mono
        uint guitar_size;
        ChunkSamples guitar(CHUNK_SIZE_GUITAR - 4, (Min(guitar_size, CHUNK_SIZE_GUITAR) - 4) / 2); // -2 samples
    }
    else
    {
        ChunkSamples backing(CHUNK_SIZE_BACKING, Min(backing_size_current, CHUNK_SIZE_BACKING) / 2); // Interleaved stereo
        ChunkSamples guitar(CHUNK_SIZE_GUITAR, Min(guitar_size_current, CHUNK_SIZE_GUITAR) / 2); // Mono
    }
} Chunk;

typedef struct
{
    local uint sample_count = (FileSize() - FTell()) / 2;
    local uint i = 0;
    
    Chunk chunks(i, 0, 0);
    i += 1;
    
    local uint backing_size = chunks[0].backing_size;
    local uint guitar_size = chunks[0].guitar_size;
    
    local int backing_size_current = backing_size - sizeof(chunks[0].backing);
    local int guitar_size_current = guitar_size - sizeof(chunks[0].guitar);

    while ((FileSize() - FTell()) > 6)
    {
        Chunk chunks(i, backing_size_current, guitar_size_current);
        
        backing_size_current -= sizeof(chunks[i].backing);
        guitar_size_current -= sizeof(chunks[i].guitar);
        
        i += 1;
    }

    local uint total_samples = Max(backing_size / 2, guitar_size) / 2;
    local double seconds = (double)total_samples / (double)SAMPLE_RATE;

} RawAudio<read=Str("length: %.02fs (%d samples)", this.seconds, this.total_samples)>;

RawAudio file;